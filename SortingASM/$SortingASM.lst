Microsoft (R) Macro Assembler Version 14.28.29335.0	    01/20/21 17:07:17
Project (Text.asm					     Page 1 - 1


				TITLE Project (Text.asm)
				INCLUDE Irvine32.inc
			      C ; Include file for Irvine32.lib             (Irvine32.inc)
			      C 
			      C ;OPTION CASEMAP:NONE		; optional: make identifiers case-sensitive
			      C 
			      C INCLUDE SmallWin.inc		; MS-Windows prototypes, structures, and constants
			      C .NOLIST
			      C .LIST
			      C 
			      C INCLUDE VirtualKeys.inc
			      C ; VirtualKeys.inc
			      C .NOLIST
			      C .LIST
			      C 
			      C 
			      C .NOLIST
			      C .LIST
			      C 

 00000000			.data
				;--------------------------------Part 1--------------------------------------

 00000000 00				temp byte ?
 00000001 43 6F 6E 74 69		con byte "Continue",0
	   6E 75 65 00
 0000000A 44 6F 20 79 6F		ms byte "Do you want to continue.........?",0
	   75 20 77 61 6E
	   74 20 74 6F 20
	   63 6F 6E 74 69
	   6E 75 65 2E 2E
	   2E 2E 2E 2E 2E
	   2E 2E 3F 00
 0000002C 45 6E 74 65 72		sb byte "Enter 10 number to perform selection sort : ",0
	   20 31 30 20 6E
	   75 6D 62 65 72
	   20 74 6F 20 70
	   65 72 66 6F 72
	   6D 20 73 65 6C
	   65 63 74 69 6F
	   6E 20 73 6F 72
	   74 20 3A 20 00
 00000059  0000000A [			ssort dword 10 dup(?)
	    00000000
	   ]
 00000081 00000000			i dword ?
 00000085 00000000			j dword ?
 00000089 00000000			p dword ?
 0000008D 00000024			size_1 dword sizeof ssort - 4
 00000091 00000028			size2 dword sizeof ssort
 00000095  0000000A [			ssort2 dword 10 dup(?)
	    00000000
	   ]
					
 000000BD  0000000A [			dat dd 10 dup(?)
	    00000000
	   ]
 000000E5 00000000			cnt dd ?
 000000E9 00000000			l dd ?
 000000ED 00000000			r dd ?

 000000F1 00000000			d dword ?

					
 000000F5 54 68 65 20 73		string byte "The selection sort array is : ",0
	   65 6C 65 63 74
	   69 6F 6E 20 73
	   6F 72 74 20 61
	   72 72 61 79 20
	   69 73 20 3A 20
	   00
 00000114 20 20 20 20 20		string1 byte "       Enter the array of size 10 : ",0
	   20 20 45 6E 74
	   65 72 20 74 68
	   65 20 61 72 72
	   61 79 20 6F 66
	   20 73 69 7A 65
	   20 31 30 20 3A
	   20 00
 00000139 00000000			filehandle DWORD ?
 0000013D 53 65 6C 65 63		filese BYTE "Selection.txt", 0 
	   74 69 6F 6E 2E
	   74 78 74 00
 = 000003E8				buffSize = 1000 
 0000014B  000003E8 [			buffer byte buffsize dup(?)
	    00
	   ]
 00000533 51 75 69 63 6B		filequ BYTE "Quick.txt", 0 
	   2E 74 78 74 00
 = 000003E8				buffSize1 = 1000 
 0000053D  000003E8 [			bufferqu byte buffsize dup(?)
	    00
	   ]
 00000925 54 68 65 20 51		quickstring byte "The Quick sort array is :",0
	   75 69 63 6B 20
	   73 6F 72 74 20
	   61 72 72 61 79
	   20 69 73 20 3A
	   00

 0000093F 45 6E 74 65 72		go Byte "Enter 1 to go back to menu or any other key to exit : ",0h
	   20 31 20 74 6F
	   20 67 6F 20 62
	   61 63 6B 20 74
	   6F 20 6D 65 6E
	   75 20 6F 72 20
	   61 6E 79 20 6F
	   74 68 65 72 20
	   6B 65 79 20 74
	   6F 20 65 78 69
	   74 20 3A 20 00

				;--------------------------------Part 2--------------------------------------
					
 00000976 00000000			gap dword ?
 0000097A 00000000			swp dword ?
 0000097E  0000000A [			ssort1 dword 10 dup(?)
	    00000000
	   ]

 000009A6 54 68 65 20 43		combstring byte "The Comb sort array is :",0
	   6F 6D 62 20 73
	   6F 72 74 20 61
	   72 72 61 79 20
	   69 73 20 3A 00
 000009BF 54 68 65 20 49		insertionsort byte "The Insertion sort array is :",0
	   6E 73 65 72 74
	   69 6F 6E 20 73
	   6F 72 74 20 61
	   72 72 61 79 20
	   69 73 20 3A 00
 000009DD 43 6F 6D 62 2E		file BYTE "Comb.txt", 0
	   74 78 74 00
 000009E6 49 6E 73 65 72		file1 BYTE "Insertion.txt", 0 
	   74 69 6F 6E 2E
	   74 78 74 00
 000009F4 4D 65 72 67 65		file3 BYTE "Merge.txt", 0
	   2E 74 78 74 00
 000009FE 00000000			n DWORD ? 
 00000A02 00000000			key DWORD ?
 00000A06  0000000A [			arr DWORD 10 dup (?)
	    00000000
	   ]
 00000A2E 00000028		    lens DWORD ($ - arr)
 00000A32  0000000A [		    ssort5 DWORD 10 DUP(0)
	    00000000
	   ]

 = esi				    array textequ <esi>
 = eax				    im textequ <eax>
 = ebx				    jm textequ <ebx>
 = edi				    km textequ <edi>
 = ebp				    lm textequ <ebp>
 = edx				    mm textequ <edx>
 = ecx				    rm textequ <ecx>


				;--------------------------------Part 3-------------------------------------
					
 = 0000000A				count = 10

 00000A5A  0000000A [			arrayb dword 10 DUP (?)
	    00000000
	   ]

 00000A82 42 55 42 42 4C		str1 byte "BUBBLE SORTING",0h
	   45 20 53 4F 52
	   54 49 4E 47 00
 00000A91 45 6E 74 65 72		str2 byte "Enter The Elements of Array : ",0h
	   20 54 68 65 20
	   45 6C 65 6D 65
	   6E 74 73 20 6F
	   66 20 41 72 72
	   61 79 20 3A 20
	   00
 00000AB0 53 6F 72 74 69		str3 byte "Sorting The Elements ..... ",0h
	   6E 67 20 54 68
	   65 20 45 6C 65
	   6D 65 6E 74 73
	   20 2E 2E 2E 2E
	   2E 20 00
 00000ACC 52 65 73 75 6C		str4 byte "Resultant Array : ",0h
	   74 61 6E 74 20
	   41 72 72 61 79
	   20 3A 20 00

 00000ADF 00000000			filehandleb DWORD ?  
 00000AE3 42 75 62 62 6C		fileb BYTE "Bubble.txt", 0    
	   65 2E 74 78 74
	   00
 00000AEE  000003E8 [			bufferb BYTE 1000 DUP(?)
	    00
	   ]


 = 0000000A				count2 = 10
 00000ED6  0000000A [			arraysh dword 10 DUP (?)
	    00000000
	   ]
 00000EFE  0000000A [			resultsh dword 10 DUP (?)
	    00000000
	   ]

 00000F26 53 48 45 4C 4C		str9 byte "SHELL SORTING",0h
	   20 53 4F 52 54
	   49 4E 47 00
 00000F34 45 6E 74 65 72		str10 byte "Enter The Elements of Array : ",0h
	   20 54 68 65 20
	   45 6C 65 6D 65
	   6E 74 73 20 6F
	   66 20 41 72 72
	   61 79 20 3A 20
	   00
 00000F53 53 6F 72 74 69		str11 byte "Sorting The Elements ..... ",0h
	   6E 67 20 54 68
	   65 20 45 6C 65
	   6D 65 6E 74 73
	   20 2E 2E 2E 2E
	   2E 20 00
 00000F6F 52 65 73 75 6C		str12 byte "Resultant Array : ",0h
	   74 61 6E 74 20
	   41 72 72 61 79
	   20 3A 20 00

 00000F82 00000000			filehandlesh DWORD ?  
 00000F86 53 68 65 6C 6C		filesh BYTE "Shell.txt", 0    
	   2E 74 78 74 00
 00000F90  000003E8 [			buffersh BYTE 1000 DUP(?)
	    00
	   ]


 = 0000000A				count1 = 10

 00001378  0000000A [			arrayh dword 10 DUP (?)
	    00000000
	   ]
 000013A0  0000000A [			result dword 10 DUP (?)
	    00000000
	   ]

 000013C8 48 45 41 50 20		str5 byte "HEAP SORTING",0h
	   53 4F 52 54 49
	   4E 47 00
 000013D5 45 6E 74 65 72		str6 byte "Enter The Elements of Array : ",0h
	   20 54 68 65 20
	   45 6C 65 6D 65
	   6E 74 73 20 6F
	   66 20 41 72 72
	   61 79 20 3A 20
	   00
 000013F4 53 6F 72 74 69		str7 byte "Sorting The Elements ..... ",0h
	   6E 67 20 54 68
	   65 20 45 6C 65
	   6D 65 6E 74 73
	   20 2E 2E 2E 2E
	   2E 20 00
 00001410 52 65 73 75 6C		str8 byte "Resultant Array : ",0h
	   74 61 6E 74 20
	   41 72 72 61 79
	   20 3A 20 00

 00001423 00000000			filehandleh DWORD ?  
 00001427 48 65 61 70 2E		fileh BYTE "Heap.txt", 0    
	   74 78 74 00
 00001430  000003E8 [			bufferh BYTE 1000 DUP(?)
	    00
	   ]


				;---------------------------AFTER LOADING-----------------------

 00001818 01			casetable		    byte 1
 00001819  00000045 R		                    dword selectionsort
 0000181D = 00000005							entry=($-casetable)
 0000181D  02								byte 2
 0000181E  00000198 R							dword quicksort
 00001822  03								byte 3
 00001823  000002C9 R		                    dword Insertion_sort
 00001827  04								byte 4
 00001828  000004B4 R		                    dword combsort
 0000182C  05								byte 5
 0000182D  00000658 R							dword bubblesort 
 00001831  06								byte 6
 00001832  000007A2 R							dword shell_sort
 00001836  07								byte 7
 00001837  00000BC1 R							dword heap_sort
 0000183B  08								byte 8 
 0000183C  00000BDF R							dword Mergeproc
 00001840
 = 00000008								numberofentries=($-casetable)/entry
 00001840 53 6F 72 74 69	loading              byte "Sorting" ,0 
	   6E 67 00
 00001848 20 53 4F 52 54	Display             byte " SORTING LIBRARY " , 0dh,0ah,0dh
	   49 4E 47 20 4C
	   49 42 52 41 52
	   59 20 0D 0A 0D
 0000185C  20 0D 0A 0D							byte " " , 0dh,0ah,0dh
 00001860  31 20 2D 2D 20			            byte "1 -- Selection Sort ",0dh,0ah,0dh
	   53 65 6C 65 63
	   74 69 6F 6E 20
	   53 6F 72 74 20
	   0D 0A 0D
 00001877  20 0D 0A 0D							byte " " , 0dh,0ah,0dh
 0000187B  32 20 2D 2D 20			            byte "2 -- Quick Sort",0dh,0ah,0dh
	   51 75 69 63 6B
	   20 53 6F 72 74
	   0D 0A 0D
 0000188D  20 0D 0A 0D							byte " " , 0dh,0ah,0dh
 00001891  33 20 2D 2D 20			            byte "3 -- Insertion Sort " ,0dh,0ah,0dh
	   49 6E 73 65 72
	   74 69 6F 6E 20
	   53 6F 72 74 20
	   0D 0A 0D
 000018A8  20 0D 0A 0D							byte " " , 0dh,0ah,0dh
 000018AC  34 20 2D 2D 20		                byte "4 -- Comb Sort" ,0dh,0ah,0dh
	   43 6F 6D 62 20
	   53 6F 72 74 0D
	   0A 0D
 000018BD  20 0D 0A 0D							byte " " , 0dh,0ah,0dh
 000018C1  35 20 2D 2D 20			            byte "5 -- Bubble Sort ",0dh,0ah,0dh
	   42 75 62 62 6C
	   65 20 53 6F 72
	   74 20 0D 0A 0D
 000018D5  20 0D 0A 0D							byte " " , 0dh,0ah,0dh
 000018D9  36 20 2D 2D 20						byte "6 -- Shell Sort",0dh,0ah,0dh
	   53 68 65 6C 6C
	   20 53 6F 72 74
	   0D 0A 0D
 000018EB  20 0D 0A 0D							byte " " , 0dh,0ah,0dh
 000018EF  37 20 2D 2D 20						byte "7 -- Heap Sort",0dh,0ah,0dh
	   48 65 61 70 20
	   53 6F 72 74 0D
	   0A 0D
 00001900  20 0D 0A 0D							byte " " , 0dh,0ah,0dh
 00001904  38 20 2D 2D 20						byte "8 -- Merge Sort",0dh,0ah,0dh
	   4D 65 72 67 65
	   20 53 6F 72 74
	   0D 0A 0D
 00001916  20 0D 0A 0D							byte " " , 0dh,0ah,0dh
									
														
 0000191A  45 6E 74 65 72						byte "Enter Your Choice :  ",0
	   20 59 6F 75 72
	   20 43 68 6F 69
	   63 65 20 3A 20
	   20 00


				;--------------------------------MENU------------------------------------

 00000000			.code
 00000000			menu proc
 00000000  B6 00		          mov Dh , 0
 00000002  B2 23			      mov DL , 35
 00000004  E8 00000000 E			  call GOTOXY
 00000009  BA 00001848 R	          mov edx,offset display
 0000000E  E8 00000000 E	          call writestring

 00000013  C3			ret
 00000014			menu endp

				;-------------------------------------MAIN------------------------------------
 00000014			main proc 
 00000014  E8 FFFFFFE7			call menu
 00000019  BB 00001818 R		mov ebx,offset casetable
 0000001E  B9 00000008			mov ecx,numberofentries
 00000023  E8 00000000 E		call readint
 00000028  E8 00000000 E		call clrscr
 0000002D				l1:
 0000002D  3A 03			cmp al,[ebx]
 0000002F  75 05			jne l2
 00000031  FF 53 01			call near ptr [ebx+1]
 00000034  EB 08			jmp l3
 00000036				l2:
 00000036  81 C3 00000005		add ebx,entry
 0000003C  E2 EF			loop l1
 0000003E				l3:
					exit
 00000045			main endp


				;-----------------------------------------------Sorting---------------------------------------

				;------------------------------------------SELECTION SORT---------------------------------------------
 00000045			selectionsort proc
 00000045  BA 0000013D R		mov edx, offset filese
 0000004A  E8 00000000 E		call OpenInputFile
 0000004F  A3 00000139 R		mov filehandle, eax
 00000054  A1 00000139 R		mov eax, filehandle 
 00000059  BA 0000014B R		mov edx, OFFSET buffer 
 0000005E  B9 000003E8			mov ecx, buffSize
 00000063  E8 00000000 E		call readfromfile
 00000068  BA 0000014B R		mov edx,offset buffer
 0000006D  E8 00000000 E		call writestring
 00000072  A1 00000139 R		mov eax,filehandle
 00000077  E8 00000000 E		call closefile
 0000007C  E8 00000000 E		call crlf

 00000081  BA 00000114 R		mov edx,offset string1
 00000086  E8 00000000 E		call writestring
 0000008B  B9 0000000A			mov ecx,10
 00000090  BE 00000095 R		mov esi,offset ssort2
 00000095				li:
 00000095  E8 00000000 E		call readint
 0000009A  89 06			mov [esi],eax
 0000009C  83 C6 04			add esi,4
 0000009F  E2 F4			loop li
 000000A1  E8 00000CD0			call loadi
 000000A6  E8 00000000 E		call crlf
 000000AB  BE 00000000			mov esi, 0
 000000B0  C7 05 00000081 R		mov i, 0
	   00000000
 000000BA  8B 0D 0000008D R		mov ecx,size_1
 000000C0				l1:
 000000C0  51				push ecx
 000000C1  8B 1D 00000081 R		mov ebx, i
 000000C7  89 1D 00000089 R		mov p, ebx
 000000CD  8B 0D 00000091 R		mov ecx, size2
 000000D3  83 C3 04			add ebx, 4
 000000D6  89 1D 00000085 R		mov j, ebx
 000000DC				l2:
 000000DC  51				push ecx
 000000DD  8B 35 00000085 R		mov esi, j
 000000E3  8B 86 00000095 R		mov eax, ssort2[esi]
 000000E9  8B 3D 00000089 R		mov edi, p
 000000EF  8B 9F 00000095 R		mov ebx, ssort2[edi]
 000000F5  3B C3			cmp eax, ebx
 000000F7  73 06			jnb l3
 000000F9  89 35 00000089 R		mov p, esi
 000000FF				l3:
 000000FF  59				pop ecx
 00000100  83 05 00000085 R		add j, 4
	   04
 00000107  8B 15 00000085 R		mov edx, j
 0000010D  3B D1			cmp edx, ecx
 0000010F  72 CB			jb l2
 00000111  8B 3D 00000089 R		mov edi, p
 00000117  8B 15 00000081 R		mov edx, i
 0000011D  8B 82 00000095 R		mov eax, ssort2[edx]
 00000123  87 87 00000095 R		xchg ssort2[edi], eax
 00000129  89 82 00000095 R		mov ssort2[edx], eax
 0000012F  59				pop ecx
 00000130  83 05 00000081 R		add i, 4
	   04
 00000137  8B 15 00000081 R		mov edx, i
 0000013D  3B D1			cmp edx, ecx
 0000013F  0F 82 FFFFFF7B		jb l1
 00000145  BA 000000F5 R		mov edx, offset string
 0000014A  E8 00000000 E		call writestring
 0000014F  E8 00000000 E		call crlf
 00000154  BE 00000095 R		mov esi, offset ssort2
 00000159  B9 0000000A			mov ecx, lengthof ssort2
 0000015E				print_array:
 0000015E  8B 06			mov eax, [esi]
 00000160  E8 00000000 E		call writedec
 00000165  B8 00000020			mov eax, 32
 0000016A  E8 00000000 E		call writechar
 0000016F  83 C6 04			add esi, 4
 00000172  E2 EA			loop print_array
 00000174  E8 00000000 E		call crlf

 00000179  BA 0000093F R		mov edx,offset go
 0000017E  E8 00000000 E	    call WriteString
 00000183  E8 00000000 E		call ReadDec

 00000188  83 F8 01			cmp eax,1
 0000018B  75 0A		    jne mainmenu
 0000018D  E8 00000000 E	    call Clrscr
 00000192  E8 FFFFFE7D			call main

 00000197			    mainmenu: 
 00000197  C3				ret
 00000198			selectionsort endp

				;-------------------------------QUICK SORT-------------------------------
 00000198			quicksort proc

 00000198  BA 00000533 R	    mov edx, offset filequ
 0000019D  E8 00000000 E		call OpenInputFile
 000001A2  A3 00000139 R		mov filehandle, eax
 000001A7  A1 00000139 R		mov eax, filehandle 
 000001AC  BA 0000053D R		mov edx, OFFSET bufferqu
 000001B1  B9 000003E8			mov ecx, buffSize1
 000001B6  E8 00000000 E		call readfromfile
 000001BB  BA 0000053D R		mov edx,offset bufferqu
 000001C0  E8 00000000 E		call writestring
 000001C5  A1 00000139 R		mov eax,filehandle
 000001CA  E8 00000000 E		call closefile
 000001CF  E8 00000000 E		call crlf

 000001D4  B8 0000000A		    mov eax,10
 000001D9  BA 00000114 R		mov edx,offset string1
 000001DE  E8 00000000 E		call writestring
 000001E3  B9 0000000A			mov ecx,10
 000001E8  BE 0000097E R		mov esi,offset ssort1
 000001ED  E8 00000000 E		call crlf
 000001F2  A3 000000E5 R		mov cnt,eax
 000001F7  E8 00000BF8			call scan
					 ; initialize l, r
 000001FC  B8 00000000			mov eax,0
 00000201  A3 000000E9 R		mov l,eax;
 00000206  B8 00000009			mov eax,9
 0000020B  A3 000000ED R		mov r,eax
					 ; call fast row
 00000210  E8 0000001C			call quicksor
 00000215  E8 00000B7F			call print
 0000021A  C3			ret
 0000021B			quicksort endp

 0000021B			swap proc 
					 ; use xchg to use one less register to act as a temporary variable
 0000021B  8B 14 B5			mov edx,dat[esi*4];
	   000000BD R
 00000222  87 14 9D			xchg edx,dat[ebx*4];
	   000000BD R
 00000229  87 14 B5			xchg edx,dat[esi*4];
	   000000BD R
 00000230  C3				ret
 00000231			swap endp

 00000231			quicksor proc
 00000231  A1 000000E9 R		mov eax,l
 00000236  3B 05 000000ED R		cmp eax,r
 0000023C  0F 8F 00000086		jg over
 00000242  33 F6			xor esi,esi;
 00000244  33 DB			xor ebx,ebx;
 00000246  8B 35 000000E9 R		mov esi,l;i
 0000024C  8B 1D 000000ED R		mov ebx,r;j
 00000252  8B 04 B5			mov eax,dat[esi*4] 
	   000000BD R
 00000259				sort_again:
 00000259  3B DE			cmp ebx,esi;				while (i!=j)
 0000025B  74 2F			je over_loop;
 0000025D					loop_j_again:
 0000025D  3B F3					cmp esi,ebx; 			while(i<j)
 0000025F  7D 2B					jge over_loop
 00000261  3B 04 9D					cmp eax,dat[ebx*4]; 	while (a[j]>=a[l])
	   000000BD R
 00000268  7F 05					jg loop_i_again
 0000026A  83 C3 FF					add ebx ,-1			;		j--
 0000026D  EB EE					jmp loop_j_again;	
 0000026F					loop_i_again:
 0000026F  3B F3					cmp esi,ebx; 			while (i<j)
 00000271  7D 19					jge over_loop
 00000273  3B 04 B5					cmp eax,dat[esi*4]; 	while (a[l]>=a[i])
	   000000BD R
 0000027A  7C 05					jl compare;
 0000027C  83 C6 01					add esi,1;					i++
 0000027F  EB EE					jmp loop_i_again;
 00000281					compare:
 00000281  3B F3					cmp esi,ebx;			if (i>=j)
 00000283  7D 07					jge over_loop;				break
 00000285  E8 FFFFFF91					call swap;				swap(i,j)
 0000028A  EB CD			jmp sort_again
 0000028C				over_loop:
 0000028C  8B 1D 000000E9 R			mov ebx,l;
 00000292  E8 FFFFFF84				call swap;				swap(i,l)
 00000297  56					push esi; push i
 00000298  FF 35 000000ED R			push r  ;push r
 0000029E  89 35 000000ED R			mov r,esi
 000002A4  83 05 000000ED R			add r ,-1
	   FF
 000002AB  E8 FFFFFF81				call quicksor;			quicksort(l,i-1);
 000002B0  8F 05 000000ED R			pop r
 000002B6  5B					pop ebx
 000002B7  89 1D 000000E9 R			mov l,ebx;
 000002BD  FF 05 000000E9 R			inc l
 000002C3  E8 FFFFFF69				call quicksor;			quicksort(i+1,r);
 000002C8				over:
 000002C8  C3					ret
 000002C9			quicksor endp

				;--------------------------------------------INSERTION SORT-----------------------------------
 000002C9			Insertion_sort proc
					;local ii: dword , key1: dword,jj:dword , nn:dword

 000002C9  BA 000009E6 R		mov edx, offset file1
 000002CE  E8 00000000 E		call OpenInputFile  
 000002D3  A3 00000139 R		mov  filehandle, eax   
 000002D8  BA 0000014B R		mov  edx, offset buffer 
 000002DD  B9 000003E8			mov  ecx, 1000   
 000002E2  E8 00000000 E		call Crlf
 000002E7  E8 00000000 E		call ReadFromFile   
 000002EC  BA 0000014B R		mov  edx, offset buffer  
 000002F1  E8 00000000 E		call WriteString
 000002F6  A1 00000139 R		mov eax,filehandle
 000002FB  E8 00000000 E		call CloseFile
 00000300  E8 00000000 E		Call Crlf
 00000305  E8 00000000 E		call crlf
 0000030A  E8 00000000 E		call crlf

 0000030F  BA 00000114 R		mov edx,offset string1
 00000314  E8 00000000 E		call writestring
 00000319  B9 0000000A			mov ecx,10
 0000031E  BE 0000097E R		mov esi,offset ssort1
 00000323  E8 00000000 E		call crlf
 00000328				li:
 00000328  E8 00000000 E		call readint
 0000032D  89 06			mov [esi],eax
 0000032F  83 C6 04			add esi,4
 00000332  E2 F4			loop li
 00000334  E8 00000A3D			call loadi
 00000339  E8 00000000 E		call crlf
 0000033E  BE 00000000			mov esi, 0
 00000343  C7 05 00000081 R		mov i, 0
	   00000000

 0000034D  B8 00000000			mov eax,0
 00000352  C7 05 00000976 R		mov gap,0
	   00000000
 0000035C  C7 05 000009FE R		mov n, lengthof ssort1
	   0000000A


 00000366  B8 00000001			mov eax,1

 0000036B  A3 00000081 R		mov i,eax
 00000370				Forins:
 00000370  BE 0000097E R			mov esi,offset ssort1
 00000375  6B 1D 00000081 R			imul ebx,i,type ssort1
	   04
 0000037C  03 F3				add esi,ebx
 0000037E  8B 06				mov eax,[esi]
 00000380  A3 00000A02 R			mov key,eax
 00000385  FF 35 00000081 R			push i
 0000038B  FF 0D 00000081 R			dec i
 00000391  A1 00000081 R			mov eax,i
 00000396  A3 00000085 R			mov j,eax
 0000039B  8F 05 00000081 R			pop i
 000003A1					inwhile:
 000003A1  A1 00000085 R			mov eax,j
 000003A6  83 F8 00				cmp eax,0
 000003A9  72 52				jb L1
 000003AB  BF 0000097E R			mov edi,offset ssort1 
 000003B0  6B 1D 00000085 R			imul ebx,j,type ssort1
	   04
 000003B7  03 FB				add edi,ebx
 000003B9  8B 07				mov eax,[edi]
 000003BB  3B 05 00000A02 R			cmp eax,key
 000003C1  76 3A				jbe L1
 000003C3  FF 35 00000085 R			push j
 000003C9  FF 05 00000085 R			inc j

 000003CF  BE 0000097E R			mov esi,offset ssort1
 000003D4  6B 1D 00000085 R			imul ebx,j,type ssort1
	   04
 000003DB  03 F3				add esi,ebx
 000003DD  8F 05 00000085 R			pop j

 000003E3  BF 0000097E R			mov edi,offset ssort1
 000003E8  6B 1D 00000085 R			imul ebx,j,type ssort1
	   04
 000003EF  03 FB				add edi,ebx
 000003F1  8B 07				mov eax,[edi]
 000003F3  89 06				mov [esi],eax
 000003F5  FF 0D 00000085 R			dec j
 000003FB  EB A4				jmp inwhile
 000003FD					L1:
 000003FD  FF 35 00000085 R			push j
 00000403  FF 05 00000085 R			inc j
 00000409  BE 0000097E R			mov esi,offset ssort1
 0000040E  6B 1D 00000085 R			imul ebx,j,type ssort1
	   04
 00000415  03 F3				add esi,ebx
 00000417  A1 00000A02 R			mov eax,key
 0000041C  89 06				mov [esi],eax
 0000041E  FF 05 00000081 R			inc i
 00000424  A1 000009FE R			mov eax,n
						;call writedec
 00000429  39 05 00000081 R			cmp i,eax
 0000042F  0F 82 FFFFFF3B		jb Forins
						
 00000435  BA 000009BF R			mov edx, offset insertionsort
 0000043A  E8 00000000 E			call writestring
 0000043F  E8 00000000 E			call crlf
 00000444  BE 0000097E R			mov esi, offset ssort1
 00000449  B9 0000000A				mov ecx, lengthof ssort1
 0000044E						print_array:
 0000044E  8B 06					mov eax, [esi]
 00000450  E8 00000000 E				call writedec
 00000455  B8 00000020					mov eax, 32
 0000045A  E8 00000000 E				call writechar
 0000045F  83 C6 04					add esi, 4
 00000462  E2 EA					loop print_array
 00000464  E8 00000000 E				call crlf


 00000469  BA 0000093F R			mov edx,offset go
 0000046E  E8 00000000 E			call WriteString
 00000473  E8 00000000 E			call ReadDec

 00000478  83 F8 01			    cmp eax,1
 0000047B  75 0A				jne mainmenu
 0000047D  E8 00000000 E			call Clrscr
 00000482  E8 FFFFFB8D				call main

 00000487			mainmenu: 
 00000487  C3			ret
 00000488			Insertion_sort endp


				;-------------------------------------------COMB SORT-----------------------------------
 00000488			gaap proc
 00000488  A1 00000976 R		mov eax, gap
 0000048D  BB 0000000A			mov ebx, 10
 00000492  F7 E3			mul ebx
 00000494  B9 0000000D			mov ecx, 13
 00000499  F7 F1			div ecx
 0000049B  83 F8 01			cmp eax,1
 0000049E  7C 02			jl IFF
 000004A0  EB 0C			JMP ELSEE
 000004A2				IFF:
 000004A2  C7 05 00000976 R			mov gap, 1
	   00000001
 000004AC  EB 05				JMP ENDD
					
 000004AE				ELSEE:
 000004AE  A3 00000976 R			mov gap, eax
					
 000004B3				ENDD:
 000004B3  C3					ret
						
 000004B4			gaap endp


 000004B4			combsort PROC
					;LOCAL i:dword, j:dword, n:DWORD 
 000004B4  BA 000009DD R		mov edx, offset file
 000004B9  E8 00000000 E		call OpenInputFile  
 000004BE  A3 00000139 R		mov  filehandle, eax   
 000004C3  BA 0000014B R		mov  edx, offset buffer 
 000004C8  B9 000003E8			mov  ecx, 1000   
 000004CD  E8 00000000 E		call ReadFromFile   
 000004D2  BA 0000014B R		mov  edx, offset buffer  
 000004D7  E8 00000000 E		call WriteString 
 000004DC  A1 00000139 R		mov eax,filehandle
 000004E1  E8 00000000 E		call CloseFile
 000004E6  E8 00000000 E		Call Crlf
 000004EB  E8 00000000 E		call crlf

 000004F0  BA 00000114 R		mov edx,offset string1
 000004F5  E8 00000000 E		call writestring
 000004FA  B9 0000000A			mov ecx,10
 000004FF  BE 00000059 R		mov esi,offset ssort
 00000504  E8 00000000 E		call crlf
 00000509				li:
 00000509  E8 00000000 E		call readint
 0000050E  89 06			mov [esi],eax
 00000510  83 C6 04			add esi,4
 00000513  E2 F4			loop li
 00000515  E8 0000085C			call loadi
 0000051A  E8 00000000 E		call crlf
 0000051F  BE 00000000			mov esi, 0
 00000524  C7 05 00000081 R		mov i, 0
	   00000000

 0000052E  B8 00000000			mov eax,0
 00000533  C7 05 00000976 R		mov gap,0
	   00000000
 0000053D  C7 05 000009FE R		mov n, lengthof ssort
	   0000000A
 00000547  C7 05 00000976 R		mov gap, lengthof ssort					;int gap = n; 
	   0000000A

					
 00000551  C7 05 0000097A R		mov swp,1					;make a variable swap
	   00000001
 0000055B				WHILEE:						;while (gap != 1 || swapped == true) 
 0000055B  A1 00000976 R			mov eax,gap
 00000560  83 F8 01				cmp eax, 1
 00000563  74 02				je C2
 00000565  EB 14				jmp P_A
 00000567					C2:
 00000567  B8 00000000					mov eax, 0
 0000056C  A1 0000097A R				mov eax,swp
 00000571  83 F8 01					cmp eax,1
 00000574  74 05					je P_A
 00000576  E9 0000008A					jmp ENDWHILE

 0000057B					P_A:
													;Inside While
 0000057B  E8 FFFFFF08					call gaap					;gap = getNextGap(gap); 

 00000580  C7 05 0000097A R				mov swp,0					;swapped = false; 
	   00000000

 0000058A  C7 05 00000081 R				mov i,0
	   00000000
							
 00000594						FORL:
 00000594  B8 00000000						mov eax, 0	
 00000599  A1 000009FE R					mov eax, n	
 0000059E  BB 00000000						mov ebx, 0	
 000005A3  8B 1D 00000976 R					mov ebx, gap
 000005A9  2B C3						sub eax,ebx	
 000005AB  8B 1D 00000081 R					mov ebx, i
 000005B1  3B D8						cmp ebx, eax
 000005B3  7D 4B						jge ENDFOR				 ;for (int i=0; i<n-gap; i++) 

 000005B5  8B 35 00000081 R					mov esi, i
 000005BB  8B 04 B5						mov eax, ssort[esi*4]
	   00000059 R
 000005C2  03 35 00000976 R					add esi,gap
 000005C8  8B 1C B5						mov ebx, ssort[esi*4]
	   00000059 R
 000005CF  3B C3						cmp eax, ebx 
														 ;if (a[i] > a[i+gap]) 
 000005D1  7E 25						JLE IFEND					
 000005D3  93							xchg eax,ebx
 000005D4  8B 35 00000081 R					mov esi, i
 000005DA  89 04 B5						mov ssort[esi*4],eax
	   00000059 R
 000005E1  03 35 00000976 R					add esi, gap
 000005E7  89 1C B5						mov ssort[esi*4],ebx
	   00000059 R
 000005EE  C7 05 0000097A R					mov swp, 1
	   00000001

 000005F8							IFEND:
 000005F8  FF 05 00000081 R						inc i
 000005FE  EB 94							jmp FORL

 00000600							ENDFOR:
 00000600  E9 FFFFFF56								JMP WHILEE
								
 00000605							ENDWHILE:
								
 00000605  BA 000009A6 R						mov edx, offset combstring
 0000060A  E8 00000000 E						call writestring
 0000060F  E8 00000000 E						call crlf
 00000614  BE 00000059 R						mov esi, offset ssort
 00000619  B9 0000000A							mov ecx, lengthof ssort
 0000061E								print_array:
 0000061E  8B 06								mov eax, [esi]
 00000620  E8 00000000 E							call writedec
 00000625  B8 00000020								mov eax, 32
 0000062A  E8 00000000 E							call writechar
 0000062F  83 C6 04								add esi, 4
 00000632  E2 EA							loop print_array
 00000634  E8 00000000 E						call crlf

 00000639  BA 0000093F R						mov edx,offset go
 0000063E  E8 00000000 E	                    call WriteString
 00000643  E8 00000000 E						call ReadDec

 00000648  83 F8 01							cmp eax,1
 0000064B  75 0A							jne mainmenu
 0000064D  E8 00000000 E						call Clrscr
 00000652  E8 FFFFF9BD							call main

 00000657			mainmenu:
 00000657  C3			ret
				 					
 00000658			combsort ENDP





				;----------------------------------------BUBBLE SORT--------------------------------------
 00000658			bubblesort proc
 00000658  B6 01			mov dh,1
 0000065A  B2 32			mov dl,50
 0000065C  E8 00000000 E		call Gotoxy

 00000661  BA 00000A82 R		mov edx,offset str1
 00000666  E8 00000000 E		call WriteString
 0000066B  E8 00000000 E		call Crlf

 00000670  BA 00000AE3 R		mov  edx,offset fileb  
 00000675  E8 00000000 E		call OpenInputFile  
 0000067A  A3 00000ADF R		mov  filehandleb,eax   
 0000067F  BA 00000AEE R		mov  edx,offset bufferb 
 00000684  B9 000003E8			mov  ecx,1000   
 00000689  E8 00000000 E		call Crlf
 0000068E  E8 00000000 E		call ReadFromFile   
 00000693  BA 00000AEE R		mov  edx,offset bufferb  
 00000698  E8 00000000 E		call WriteString
 0000069D  A1 00000ADF R		mov eax,filehandleb
 000006A2  E8 00000000 E		call CloseFile
 000006A7  E8 00000000 E		Call Crlf 

 000006AC  E8 0000000D			call Elementsb

 000006B1  68 00000A5A R		push offset arrayb
 000006B6  6A 0A			push count

 000006B8  E8 00000030			call Bubble1
				 
 000006BD  C3			ret
 000006BE			bubblesort endp


 000006BE			Elementsb PROC

 000006BE  B6 0F			mov dh, 15
 000006C0  B2 14			mov dl, 20
 000006C2  E8 00000000 E		call Gotoxy
 000006C7  BA 00000A91 R		mov edx, offset str2
 000006CC  E8 00000000 E		call WriteString
				 
 000006D1  B8 00000000			mov eax, 0
 000006D6  BE 00000A5A R		mov esi, offset arrayb
 000006DB  B9 0000000A			mov ecx, count

 000006E0				L1:
 000006E0  E8 00000000 E			call ReadDec
 000006E5  89 06				mov [esi],eax
 000006E7  83 C6 04				add esi,type arrayb
 000006EA  E2 F4				loop L1

 000006EC  C3			ret

 000006ED			Elementsb ENDP

 000006ED			Bubble1 PROC
 000006ED  55				push ebp
 000006EE  8B EC			mov ebp,esp
 000006F0  60				pushad
 000006F1  8B 4D 08			mov ecx,[ebp + 8]
 000006F4  49				dec ecx

 000006F5				L2b:
 000006F5  51					 push ecx
 000006F6  8B 75 0C				 mov esi,[ebp + 12]

 000006F9				   L3b:
 000006F9  8B 06					mov eax,[esi]
 000006FB  3B 46 04					cmp eax,[esi+4]
 000006FE  7C 05					jl L4b
 00000700  87 46 04					xchg eax,[esi+4]
 00000703  89 06					mov [esi],eax

 00000705						L4b:
 00000705  83 C6 04					   add esi,type arrayb
 00000708  E2 EF					   loop L3b

 0000070A  59					pop ecx
 0000070B  E2 E8				loop L2b

 0000070D  61					popad
 0000070E  5D					pop ebp


 0000070F  B6 19			mov dh,25
 00000711  B2 14			mov dl,20
 00000713  E8 00000000 E		call Gotoxy    
 00000718  BA 00000AB0 R		mov edx,offset str3
 0000071D  E8 00000000 E		call WriteString
 00000722  E8 00000000 E		call Crlf
 00000727  E8 00000000 E		call Crlf
 0000072C  B8 000007D0			mov eax,2000
 00000731  E8 00000000 E		call Delay

 00000736  B6 1B			mov dh,27
 00000738  B2 14			mov dl,20
 0000073A  E8 00000000 E		call Gotoxy
 0000073F  BA 00000ACC R		mov edx,offset str4
 00000744  E8 00000000 E		call WriteString
 00000749  E8 00000000 E		call Crlf

 0000074E  BE 00000A5A R		mov esi,offset arrayb
 00000753  B9 0000000A			mov ecx,count
 00000758  B6 1D			mov dh,29
 0000075A  B2 14			mov dl,20
 0000075C  E8 00000000 E		call Gotoxy
 00000761				L5b:
 00000761  8B 06				mov eax,[esi]
 00000763  E8 00000000 E			call WriteDec
 00000768  B8 00000020				mov eax,32
 0000076D  E8 00000000 E			call WriteChar
 00000772  83 C6 04				add esi,type arrayb
 00000775  E2 EA				loop L5b

 00000777  E8 00000000 E			call Crlf
 0000077C  E8 00000000 E			call Crlf

 00000781  BA 0000093F R		mov edx,offset go
 00000786  E8 00000000 E	    call WriteString
 0000078B  E8 00000000 E		call ReadDec

 00000790  83 F8 01			cmp eax,1
 00000793  75 0A		    jne mainmenu
 00000795  E8 00000000 E	    call Clrscr
 0000079A  E8 FFFFF875		    call main

 0000079F			mainmenu:
 0000079F  C2 0008		ret 8

 000007A2			Bubble1 ENDP

				;-------------------------------------------SHELL SORT----------------------------------

 000007A2			shell_sort proc
 000007A2  B6 01			mov dh, 1
 000007A4  B2 32			mov dl, 50
 000007A6  E8 00000000 E		call Gotoxy

 000007AB  BA 00000F26 R		mov edx, offset str9
 000007B0  E8 00000000 E		call WriteString
 000007B5  E8 00000000 E		call Crlf

 000007BA  BA 00000F86 R		mov  edx, offset filesh  
 000007BF  E8 00000000 E		call OpenInputFile  
 000007C4  A3 00000F82 R		mov  filehandlesh, eax   
 000007C9  BA 00000F90 R		mov  edx, offset buffersh 
 000007CE  B9 000003E8			mov  ecx, 1000   
 000007D3  E8 00000000 E		call Crlf
 000007D8  E8 00000000 E		call ReadFromFile   
 000007DD  BA 00000F90 R		mov  edx, offset buffersh  
 000007E2  E8 00000000 E		call WriteString  
 000007E7  A1 00000F82 R		mov eax,filehandlesh
 000007EC  E8 00000000 E		call CloseFile
 000007F1  E8 00000000 E		Call Crlf 

 000007F6  E8 0000002D			call Elementssh

 000007FB  B6 19			mov dh, 25
 000007FD  B2 14			mov dl, 20
 000007FF  E8 00000000 E		call Gotoxy
 00000804  BA 00000F53 R		mov edx, offset str11
 00000809  E8 00000000 E		call WriteString
 0000080E  E8 00000000 E		call Crlf
 00000813  B8 000007D0			mov eax, 2000
 00000818  E8 00000000 E		call Delay

 0000081D  E8 00000035			call Shell

 00000822  E8 000000D2			call Printsh
 00000827  C3				ret
 00000828			shell_sort endp


 00000828			Elementssh PROC

 00000828  B6 0F		mov dh, 15
 0000082A  B2 14		mov dl, 20
 0000082C  E8 00000000 E	call Gotoxy
 00000831  BA 00000F34 R	mov edx, offset str10
 00000836  E8 00000000 E	call WriteString
				 
 0000083B  B8 00000000		mov eax, 0
 00000840  BE 00000ED6 R	mov esi, offset arraysh
 00000845  B9 0000000A		mov ecx, count2

 0000084A			L1sh:
 0000084A  E8 00000000 E	    call ReadDec
 0000084F  89 06			mov [esi],eax
 00000851  83 C6 04		    add esi,type arraysh
 00000854  E2 F4			loop L1sh

 00000856  C3			ret

 00000857			Elementssh ENDP


 00000857			Shell PROC

					;LOCAL i : DWORD, d : DWORD, l : DWORD

 00000857  BE 00000000			mov esi, 0
 0000085C  C7 05 00000081 R		mov i, 0
	   00000000

 00000866  B8 00000000			mov eax,0
 0000086B  C7 05 000000E9 R		mov l, lengthof arraysh
	   0000000A
 00000875  C7 05 000000F1 R		mov d, lengthof arraysh
	   0000000A
					
 0000087F				DOsh:
 0000087F  83 3D 000000F1 R			cmp d, 1
	   01
 00000886  76 70				jbe L1sh

 00000888  A1 000000F1 R			mov eax, d
 0000088D  83 C0 01				add eax, 1
 00000890  BB 00000002				mov ebx, 2
 00000895  99					cdq 
 00000896  F7 F3				div ebx
 00000898  A3 000000F1 R			mov d, eax
 0000089D  C7 05 00000081 R			mov i, 0
	   00000000

 000008A7					L3sh:
 000008A7  A1 000000E9 R				mov eax, l
 000008AC  8B 1D 000000F1 R				mov ebx, d
 000008B2  2B C3					sub eax, ebx
 000008B4  39 05 00000081 R				cmp i, eax
 000008BA  73 3A					jae L4sh
						
 000008BC  8B 35 000000F1 R				mov esi, d
 000008C2  8B 3D 00000081 R				mov edi, i
 000008C8  03 F7					add esi, edi
 000008CA  6B F6 04					imul esi, esi, TYPE arraysh
 000008CD  6B FF 04					imul edi, edi, TYPE arraysh
 000008D0  8B 96 00000ED6 R				mov edx, arraysh[esi]
 000008D6  8B 8F 00000ED6 R				mov ecx, arraysh[edi]
 000008DC  3B D1					cmp edx, ecx
 000008DE  73 0E					jae L5sh
 000008E0  87 CA					xchg ecx, edx
 000008E2  89 96 00000ED6 R				mov arraysh[esi], edx
 000008E8  89 8F 00000ED6 R				mov arraysh[edi], ecx

 000008EE						L5sh:
 000008EE  FF 05 00000081 R					inc i
 000008F4  EB B1						jmp L3sh

 000008F6				L4sh:
 000008F6  EB 87				jmp DOsh

 000008F8				L1sh:
								
 000008F8  C3				ret

 000008F9			Shell endp


 000008F9			Printsh PROC

 000008F9  BE 00000ED6 R		mov esi, offset arraysh
 000008FE  BF 00000EFE R		mov edi, offset resultsh
 00000903  B9 0000000A			mov ecx, lengthof arraysh
 00000908  F3/ A5			rep movsd

 0000090A  B6 1B			mov dh, 27
 0000090C  B2 14			mov dl, 20
 0000090E  E8 00000000 E		call Gotoxy
 00000913  BA 00000F6F R		mov edx, offset str12
 00000918  E8 00000000 E		call WriteString 
 0000091D  E8 00000000 E		call Crlf

 00000922  B6 1D			mov dh, 29
 00000924  B2 14			mov dl, 20
 00000926  E8 00000000 E		call Gotoxy

 0000092B  BE 00000EFE R		mov esi, offset resultsh
 00000930  B9 0000000A			mov ecx, count2

 00000935				L2sh:
 00000935  8B 06				mov eax, [esi]
 00000937  E8 00000000 E			call WriteDec
 0000093C  B8 00000020				mov eax, 32
 00000941  E8 00000000 E			call WriteChar
 00000946  83 C6 04				add esi, TYPE arraysh
 00000949  E2 EA				loop L2sh

 0000094B  E8 00000000 E			call Crlf
 00000950  E8 00000000 E			call Crlf

 00000955  BA 0000093F R			mov edx,offset go
 0000095A  E8 00000000 E	        call WriteString
 0000095F  E8 00000000 E		    call ReadDec

 00000964  83 F8 01			    cmp eax,1
 00000967  75 0A		        jne mainmenu
 00000969  E8 00000000 E	        call Clrscr
 0000096E  E8 FFFFF6A1		        call main

 00000973			mainmenu:
 00000973  C3			ret

 00000974			Printsh ENDP


				;----------------------------------------HEAP SORT---------------------------------------



 00000974			Input PROC

 00000974  B6 01			mov dh, 1
 00000976  B2 32			mov dl, 50
 00000978  E8 00000000 E		call Gotoxy

 0000097D  BA 000013C8 R		mov edx, OFFSET str5
 00000982  E8 00000000 E		call WriteString
 00000987  E8 00000000 E		call Crlf

 0000098C  BA 00001427 R		mov  edx,OFFSET fileh  
 00000991  E8 00000000 E		call OpenInputFile  
 00000996  A3 00001423 R		mov  filehandleh, eax   
 0000099B  BA 00001430 R		mov  edx, OFFSET bufferh 
 000009A0  B9 000003E8			mov  ecx, 1000   
 000009A5  E8 00000000 E		call Crlf
 000009AA  E8 00000000 E		call ReadFromFile   
 000009AF  BA 00001430 R		mov  edx, OFFSET bufferh  
 000009B4  E8 00000000 E		call WriteString  
 000009B9  A1 00001423 R		mov eax,filehandleh
 000009BE  E8 00000000 E		call CloseFile
 000009C3  E8 00000000 E		Call Crlf 

 000009C8  E8 00000049			call Elementsh

 000009CD  B6 1A			mov dh, 26
 000009CF  B2 14			mov dl, 20
 000009D1  E8 00000000 E		call Gotoxy
 000009D6  BA 000013F4 R		mov edx, OFFSET str7
 000009DB  E8 00000000 E		call WriteString
 000009E0  E8 00000000 E		call Crlf

 000009E5  B8 000007D0			mov eax, 2000
 000009EA  E8 00000000 E		call Delay

 000009EF  BE 00001378 R		mov esi, OFFSET arrayh
 000009F4  B9 0000000A			mov ecx, lengthof arrayh

 000009F9  B6 1C			mov dh, 28
 000009FB  B2 14			mov dl, 20
 000009FD  E8 00000000 E		call Gotoxy

 00000A02  BA 00001410 R		mov edx, OFFSET str8
 00000A07  E8 00000000 E		call WriteString
 00000A0C  B6 1E			mov dh, 30
 00000A0E  B2 14			mov dl, 20
 00000A10  E8 00000000 E		call Gotoxy

 00000A15  C3				ret

 00000A16			Input ENDP

 00000A16			Elementsh PROC

 00000A16  B6 0F			mov dh, 15
 00000A18  B2 14			mov dl, 20
 00000A1A  E8 00000000 E		call Gotoxy
 00000A1F  BA 000013D5 R		mov edx, OFFSET str6
 00000A24  E8 00000000 E		call WriteString

 00000A29  B8 00000000			mov eax,  0
 00000A2E  BE 00001378 R		mov esi, OFFSET arrayh
 00000A33  B9 0000000A			mov ecx, count1

 00000A38				L1h:
 00000A38  E8 00000000 E			call ReadDec
 00000A3D  89 06				mov [esi], eax
 00000A3F  83 C6 04				add esi,TYPE arrayh
 00000A42  E2 F4				loop L1h

 00000A44  C3					ret

 00000A45			Elementsh ENDP


 00000A45			Swaph PROC, arr1 : PTR DWORD, arr2 : PTR DWORD

 00000A48  B8 00000000			mov eax, 0

 00000A4D  8B 75 08			mov esi, arr1
 00000A50  8B 7D 0C			mov edi, arr2

 00000A53  8B 06			mov eax, [esi]
 00000A55  87 07			xchg eax, [edi]
 00000A57  89 06			mov [esi], eax

					ret

 00000A5D			Swaph ENDP


 00000A5D			Heapify PROC, arrh : PTR DWORD, nh : DWORD, i9 : DWORD

					LOCAL largest : DWORD, left : DWORD, right : DWORD

 00000A63  8B 45 10			mov eax, i9
 00000A66  89 45 FC			mov largest, eax

 00000A69  FF 75 10			push i9
 00000A6C  6B 5D 10 02			imul ebx, i9, 2
 00000A70  43				inc ebx
 00000A71  89 5D F8			mov left, ebx
 00000A74  8B 45 F8			mov eax, left
 00000A77  8F 45 10			pop i9

 00000A7A  FF 75 10			push i9
 00000A7D  6B 5D 10 02			imul ebx, i9, 2
 00000A81  83 C3 02			add ebx, 2
 00000A84  89 5D F4			mov right, ebx
 00000A87  8B 45 F4			mov eax, right
 00000A8A  8F 45 10			pop i9

 00000A8D  8B 45 F8			mov eax, left
 00000A90  3B 45 0C			cmp eax, nh
 00000A93  73 1E			jae L2h

 00000A95  8B 75 08			mov esi, arrh
 00000A98  6B 5D F8 04			imul ebx, left, TYPE arrh
 00000A9C  03 F3			add esi, ebx
 00000A9E  8B 7D 08			mov edi, arrh
 00000AA1  6B 5D FC 04			imul ebx, largest, TYPE arrh
 00000AA5  03 FB			add edi, ebx
 00000AA7  8B 06			mov eax, [esi]
 00000AA9  3B 07			cmp eax, [edi]
 00000AAB  76 06			jbe L2h

 00000AAD  8B 45 F8			mov eax, left
 00000AB0  89 45 FC			mov largest, eax
 00000AB3				L2h:
 00000AB3  8B 45 F4		    mov eax,right
 00000AB6  3B 45 0C		    cmp eax,nh
 00000AB9  73 1E		    jae L3h

 00000ABB  8B 75 08			mov esi, arrh
 00000ABE  6B 5D F4 04			imul ebx, right, TYPE arrh
 00000AC2  03 F3			add esi, ebx
 00000AC4  8B 7D 08			mov edi, arrh
 00000AC7  6B 5D FC 04			imul ebx, largest, TYPE arrh
 00000ACB  03 FB			add edi, ebx
 00000ACD  8B 06			mov eax, [esi]
 00000ACF  3B 07			cmp eax, [edi]
 00000AD1  76 06			jbe L3h

 00000AD3  8B 45 F4			mov eax, right
 00000AD6  89 45 FC			mov largest, eax

 00000AD9				L3h:
 00000AD9  8B 45 FC				mov eax, largest
 00000ADC  3B 45 10				cmp eax, i9
 00000ADF  74 27				je L4h

 00000AE1  8B 75 08			mov esi, arrh
 00000AE4  6B 5D 10 04			imul ebx, i9, TYPE arrh
 00000AE8  03 F3			add esi, ebx
 00000AEA  8B 7D 08			mov edi, arrh
 00000AED  6B 5D FC 04			imul ebx, largest, TYPE arrh
 00000AF1  03 FB			add edi, ebx

					INVOKE Swaph, esi, edi
					INVOKE Heapify, arrh, nh, largest

 00000B08				L4h:
						ret

 00000B0C			    Heapify endp
					
 00000B0C			Heap PROC, arrh1 : DWORD, nt : DWORD

					LOCAL i10: DWORD, j10 : DWORD

 00000B12  8B 45 0C			mov eax, nt
 00000B15  BB 00000002			mov ebx, 2
 00000B1A  99				cdq
 00000B1B  F7 FB			idiv ebx
 00000B1D  48				dec eax
 00000B1E  89 45 FC			mov i10, eax
 00000B21  51				push ecx
 00000B22  8B 4D FC			mov ecx, i10
 00000B25  41				inc ecx

 00000B26				L5h:
						INVOKE Heapify, arrh1, nt, i10
 00000B34  FF 4D FC				dec i10
 00000B37  8B 45 FC				mov eax, i10
 00000B3A  E2 EA				loop L5h

 00000B3C  59				pop ecx

 00000B3D  8B 45 0C			mov eax, nt
 00000B40  48				dec eax
 00000B41  89 45 F8			mov j10, eax
 00000B44  51				push ecx
 00000B45  8B 4D F8			mov ecx, j10
 00000B48  41				inc ecx

 00000B49				L6h:
 00000B49  8B 75 08				mov esi, arrh1
 00000B4C  8B 7D 08				mov edi, arrh1
 00000B4F  6B 5D F8 04				imul ebx, j10, TYPE arrh1
 00000B53  03 FB				add edi, ebx

						INVOKE Swaph, esi, edi
						INVOKE Heapify, arrh1, j10, 0
 00000B69  FF 4D F8				dec j10
 00000B6C  8B 45 F8				mov eax, j10
 00000B6F  E2 D8				loop L6h

 00000B71  59				pop ecx

					ret
 00000B76			Heap ENDP

 00000B76			Printh PROC, arr1 : DWORD, arr2 : DWORD

 00000B79  8B 75 08			mov esi, arr1
 00000B7C  8B 4D 0C			mov ecx, arr2

 00000B7F				L7h:
 00000B7F  8B 06				mov eax, [esi]
 00000B81  E8 00000000 E			call WriteDec
 00000B86  B8 00000020				mov eax,32
 00000B8B  E8 00000000 E			call WriteChar
 00000B90  83 C6 04				add esi, TYPE arr1
 00000B93  E2 EA				loop L7h

 00000B95  E8 00000000 E			call Crlf
 00000B9A  E8 00000000 E			call Crlf

 00000B9F  BA 0000093F R			mov edx,offset go
 00000BA4  E8 00000000 E	        call WriteString
 00000BA9  E8 00000000 E		    call ReadDec

 00000BAE  83 F8 01			    cmp eax,1
 00000BB1  75 0A		        jne mainmenu
 00000BB3  E8 00000000 E	        call Clrscr
 00000BB8  E8 FFFFF457		        call main

 00000BBD			mainmenu:
				ret

 00000BC1			Printh ENDP

 00000BC1			heap_sort proc
 00000BC1  E8 FFFFFDAE			call Input
					INVOKE Heap, ADDR arrayh, lengthof arrayh
					Invoke Printh, ADDR arrayh, lengthof arrayh


 00000BDE  C3			ret
 00000BDF			heap_sort endp

				;---------------------MEREGE SORT----------------------
 00000BDF			Mergeproc PROC

 00000BDF  BA 000009F4 R				mov edx, offset file3
 00000BE4  E8 00000000 E				call OpenInputFile  
 00000BE9  A3 00000139 R				mov  filehandle, eax   
 00000BEE  BA 0000014B R				mov  edx, offset buffer 
 00000BF3  B9 000003E8					mov  ecx, 1000   
 00000BF8  E8 00000000 E				call Crlf
 00000BFD  E8 00000000 E				call ReadFromFile   
 00000C02  BA 0000014B R				mov  edx, offset buffer  
 00000C07  E8 00000000 E				call WriteString
 00000C0C  A1 00000139 R				mov eax,filehandle
 00000C11  E8 00000000 E				call CloseFile
 00000C16  E8 00000000 E				Call Crlf
 00000C1B  E8 00000000 E				call crlf
 00000C20  E8 00000000 E				call crlf
						
				    
 00000C25  BA 00000114 R	        mov edx,offset string1
 00000C2A  E8 00000000 E		    call writestring
 00000C2F  B9 0000000A			    mov ecx, 10
 00000C34  BE 00000A06 R		    mov esi,offset arr
 00000C39				    li:
 00000C39  E8 00000000 E		    call readint
 00000C3E  89 06			    mov [esi],eax
 00000C40  83 C6 04			    add esi,4
 00000C43  E2 F4			    loop li

 00000C45  E8 0000012C			    call loadi
 00000C4A  E8 00000000 E		    call crlf    

 00000C4F  A1 00000A2E R	        mov eax, lens
 00000C54  C1 E8 02		        shr eax, 2
 00000C57  48			        dec eax
 00000C58  50			        push eax
 00000C59  6A 00		        push 0
 00000C5B  68 00000A06 R	        push OFFSET arr
 00000C60  E8 000000D4		        call mergeSort


 00000C65  BE 00000A06 R	        mov esi, offset arr
 00000C6A  B9 0000000A			    mov ecx, lengthof arr
 00000C6F				    print_array:
 00000C6F  8B 06				    mov eax, [esi]
 00000C71  E8 00000000 E			    call writedec
 00000C76  B8 00000020				    mov eax, 32
 00000C7B  E8 00000000 E			    call writechar
 00000C80  83 C6 04				    add esi, 4
 00000C83  E2 EA				    loop print_array
 00000C85  E8 00000000 E			    call crlf

 00000C8A  BA 0000093F R	        	mov edx,offset go
 00000C8F  E8 00000000 E				call WriteString
 00000C94  E8 00000000 E				call ReadDec

 00000C99  83 F8 01				cmp eax,1
 00000C9C  75 0A				jne mainmenu
 00000C9E  E8 00000000 E			call Clrscr
 00000CA3  E8 FFFFF36C				call main

 00000CA8						mainmenu:
 00000CA8  C3						ret
				       
 00000CA9			Mergeproc ENDP



 00000CA9			merge PROC USES eax ebx ecx edx esi edi ebp


 00000CB0  BE 00000A06 R	        mov array, offset arr
 00000CB5  8B C0		        mov im, eax
 00000CB7  8B D2		        mov mm, edx
 00000CB9  8B DB		        mov jm, ebx

				        
 00000CBB  8B E8		        mov lm, im
 00000CBD  8B F8		        mov km, im
 00000CBF  8B CA		        mov rm, mm
 00000CC1  41			        inc rm

				        
 00000CC2			        While1:
 00000CC2  3B EA		        cmp lm, mm
 00000CC4  7F 30		        jg afterWhile1
 00000CC6  3B CB		        cmp rm, jm
 00000CC8  7F 2C		        jg afterWhile1

				        
 00000CCA  53			        push ebx
 00000CCB  50			        push eax
 00000CCC  8B 04 AE		        mov eax, [array+TYPE arr * lm]
 00000CCF  8B 1C 8E		        mov ebx, [array + TYPE arr * rm]
 00000CD2  3B C3		        cmp eax, ebx
 00000CD4  7D 10		        jge While1_else


				      
 00000CD6  8B 04 AE		        mov eax, [array + TYPE arr * lm]
 00000CD9  87 04 BD		        xchg [ssort5 +  TYPE arr * km], eax
	   00000A32 R
 00000CE0  45			        inc lm
 00000CE1  47			        inc km


 00000CE2  58			        pop eax
 00000CE3  5B			        pop ebx

 00000CE4  EB DC		        jmp While1

 00000CE6			        While1_else:
				        
 00000CE6  8B 04 8E		        mov eax, [array +  TYPE arr * rm]
 00000CE9  89 04 BD		        mov [ssort5 + TYPE arr * km], eax
	   00000A32 R
 00000CF0  41			        inc rm
 00000CF1  47			        inc km

				        
 00000CF2  58			        pop eax
 00000CF3  5B			        pop ebx

 00000CF4  EB CC		        jmp While1

 00000CF6			        afterWhile1:
 00000CF6  50			        push eax

				        
 00000CF7			        While2:

				        
 00000CF7  3B EA		        cmp lm, mm
 00000CF9  7F 0E		        jg While3

 00000CFB  8B 04 AE		        mov eax, [array + TYPE arr * lm]
 00000CFE  89 04 BD		        mov [ssort5 + TYPE arr * km], eax
	   00000A32 R
 00000D05  45			        inc lm
 00000D06  47			        inc km
 00000D07  EB EE		        jmp While2

				        ;final While loop
 00000D09			        While3:

				        ;terminating condition
 00000D09  3B CB		        cmp rm, jm
 00000D0B  7F 0E		        jg afterWhileLoops

 00000D0D  8B 04 8E		        mov eax, [array + TYPE arr * rm]
 00000D10  89 04 BD		        mov [ssort5 + TYPE arr * km], eax
	   00000A32 R
 00000D17  41			        inc rm
 00000D18  47			        inc km
 00000D19  EB EE		        jmp While3

 00000D1B			        afterWhileLoops:
 00000D1B  58			        pop eax

 00000D1C  8B F8		         mov km, im

 00000D1E			        forLoop1:
 00000D1E  3B FB		        cmp km, jm
 00000D20  7F 0D		        jg endMergeProc

 00000D22  8B 14 BD		        mov mm, [ssort5 + TYPE arr * km]
	   00000A32 R
 00000D29  89 14 BE		        mov [array + TYPE arr * km], mm

 00000D2C  47			        inc km
 00000D2D  EB EF		        jmp forLoop1

 00000D2F			        endMergeProc:
 00000D36  C2 0010		        ret 16


 00000D39			merge ENDP








 00000D39			mergeSort PROC USES eax ebx edx esi
				 
 00000D3D  BE 00000A06 R	    mov array, offset arr 
 00000D42  8B 44 24 18		    mov im, [esp + 24] 
 00000D46  8B 5C 24 1C		    mov jm, [esp + 28] 

 00000D4A  3B C3		    cmp im, jm
 00000D4C  74 21		    je ending

				   
 00000D4E  8B D0		    mov mm, im
 00000D50  03 D3		    add mm, jm
 00000D52  D1 EA		    shr mm, 1

				   
 00000D54  52			    push mm
 00000D55  50			    push im
 00000D56  56			    push array
 00000D57  E8 FFFFFFDD		    call mergeSort


 00000D5C  42			    inc mm
 00000D5D  53			    push jm
 00000D5E  52			    push mm
 00000D5F  56			    push array
 00000D60  E8 FFFFFFD4		    call mergeSort

				   
 00000D65  4A			    dec mm
 00000D66  53			    push jm
 00000D67  52			    push mm
 00000D68  50			    push im
 00000D69  56			    push array
 00000D6A  E8 FFFFFF3A		    call merge

 00000D6F			    ending:
 00000D73  C2 000C		    ret 12

 00000D76			mergeSort ENDP




				;-----------------------------------LOADING SORT------------------------------
 00000D76			loadi proc
 00000D76  BA 00001840 R		mov edx,offset loading
 00000D7B  E8 00000000 E		call writestring
 00000D80  B9 0000000A			mov ecx,10
 00000D85				l1:
 00000D85  B0 2E			mov al,'.'
 00000D87  E8 00000000 E		call writechar
 00000D8C  B8 0000007B			mov eax,123
 00000D91  E8 00000000 E		call delay
 00000D96  E2 ED			loop l1
 00000D98  C3				ret
 00000D99			loadi endp



				;------------------------------------------PRINT--------------------------------------

 00000D99			print proc
 00000D99  8B 0D 000000E5 R		mov ecx,cnt
 00000D9F  33 F6			xor esi,esi
 00000DA1  BA 00000925 R		mov edx, offset quickstring
 00000DA6  E8 00000000 E		call writestring
 00000DAB  E8 00000000 E		call crlf
 00000DB0  BE 000000BD R		mov esi, offset dat
 00000DB5  B9 0000000A			mov ecx, lengthof dat
 00000DBA				print_array:
 00000DBA  8B 06							mov eax, [esi]
 00000DBC  E8 00000000 E						call writedec
 00000DC1  B8 00000020							mov eax, 32
 00000DC6  E8 00000000 E						call writechar
 00000DCB  83 C6 04							add esi, 4
 00000DCE  E2 EA			loop print_array
 00000DD0  E8 00000000 E						call crlf
					
 00000DD5  BA 0000093F R		mov edx,offset go
 00000DDA  E8 00000000 E	    call WriteString
 00000DDF  E8 00000000 E		call ReadDec

 00000DE4  83 F8 01			cmp eax,1
 00000DE7  75 0A		    jne mainmenu
 00000DE9  E8 00000000 E	    call Clrscr
 00000DEE  E8 FFFFF221		    call main

 00000DF3			mainmenu:
 00000DF3  C3			ret
 00000DF4			print endp

 00000DF4			scan proc
 00000DF4  8B 0D 000000E5 R		mov ecx,cnt
 00000DFA  33 F6			xor esi,esi
 00000DFC			scanf_again:	
 00000DFC  E8 00000000 E				call readdec
 00000E01  89 04 B5					mov dat[esi*4],eax
	   000000BD R
 00000E08  46						inc esi;
 00000E09  E2 F1					loop scanf_again
 00000E0B  C3				ret
 00000E0C			scan endp




				end main
Microsoft (R) Macro Assembler Version 14.28.29335.0	    01/20/21 17:07:17
Project (Text.asm					     Symbols 2 - 1




Structures and Unions:

                N a m e                  Size
                                         Offset      Type

CONSOLE_CURSOR_INFO  . . . . . .	 00000008
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  bVisible . . . . . . . . . . .	 00000004	 DWord
CONSOLE_SCREEN_BUFFER_INFO . . .	 00000016
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  dwCursorPosition . . . . . . .	 00000004	 DWord
  wAttributes  . . . . . . . . .	 00000008	 Word
  srWindow . . . . . . . . . . .	 0000000A	 QWord
  dwMaximumWindowSize  . . . . .	 00000012	 DWord
COORD  . . . . . . . . . . . . .	 00000004
  X  . . . . . . . . . . . . . .	 00000000	 Word
  Y  . . . . . . . . . . . . . .	 00000002	 Word
FILETIME . . . . . . . . . . . .	 00000008
  loDateTime . . . . . . . . . .	 00000000	 DWord
  hiDateTime . . . . . . . . . .	 00000004	 DWord
FOCUS_EVENT_RECORD . . . . . . .	 00000004
  bSetFocus  . . . . . . . . . .	 00000000	 DWord
FPU_ENVIRON  . . . . . . . . . .	 0000001C
  controlWord  . . . . . . . . .	 00000000	 Word
  statusWord . . . . . . . . . .	 00000004	 Word
  tagWord  . . . . . . . . . . .	 00000008	 Word
  instrPointerOffset . . . . . .	 0000000C	 DWord
  instrPointerSelector . . . . .	 00000010	 DWord
  operandPointerOffset . . . . .	 00000014	 DWord
  operandPointerSelector . . . .	 00000018	 Word
INPUT_RECORD . . . . . . . . . .	 00000014
  EventType  . . . . . . . . . .	 00000000	 Word
  Event  . . . . . . . . . . . .	 00000004	 XmmWord
  bKeyDown . . . . . . . . . . .	 00000000	 DWord
  wRepeatCount . . . . . . . . .	 00000004	 Word
  wVirtualKeyCode  . . . . . . .	 00000006	 Word
  wVirtualScanCode . . . . . . .	 00000008	 Word
  uChar  . . . . . . . . . . . .	 0000000A	 Word
  UnicodeChar  . . . . . . . . .	 00000000	 Word
  AsciiChar  . . . . . . . . . .	 00000000	 Byte
  dwControlKeyState  . . . . . .	 0000000C	 DWord
  dwMousePosition  . . . . . . .	 00000000	 DWord
  dwButtonState  . . . . . . . .	 00000004	 DWord
  dwMouseControlKeyState . . . .	 00000008	 DWord
  dwEventFlags . . . . . . . . .	 0000000C	 DWord
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  dwCommandId  . . . . . . . . .	 00000000	 DWord
  bSetFocus  . . . . . . . . . .	 00000000	 DWord
KEY_EVENT_RECORD . . . . . . . .	 00000010
  bKeyDown . . . . . . . . . . .	 00000000	 DWord
  wRepeatCount . . . . . . . . .	 00000004	 Word
  wVirtualKeyCode  . . . . . . .	 00000006	 Word
  wVirtualScanCode . . . . . . .	 00000008	 Word
  uChar  . . . . . . . . . . . .	 0000000A	 Word
  UnicodeChar  . . . . . . . . .	 00000000	 Word
  AsciiChar  . . . . . . . . . .	 00000000	 Byte
  dwControlKeyState  . . . . . .	 0000000C	 DWord
MENU_EVENT_RECORD  . . . . . . .	 00000004
  dwCommandId  . . . . . . . . .	 00000000	 DWord
MOUSE_EVENT_RECORD . . . . . . .	 00000010
  dwMousePosition  . . . . . . .	 00000000	 DWord
  dwButtonState  . . . . . . . .	 00000004	 DWord
  dwMouseControlKeyState . . . .	 00000008	 DWord
  dwEventFlags . . . . . . . . .	 0000000C	 DWord
SMALL_RECT . . . . . . . . . . .	 00000008
  Left . . . . . . . . . . . . .	 00000000	 Word
  Top  . . . . . . . . . . . . .	 00000002	 Word
  Right  . . . . . . . . . . . .	 00000004	 Word
  Bottom . . . . . . . . . . . .	 00000006	 Word
SYSTEMTIME . . . . . . . . . . .	 00000010
  wYear  . . . . . . . . . . . .	 00000000	 Word
  wMonth . . . . . . . . . . . .	 00000002	 Word
  wDayOfWeek . . . . . . . . . .	 00000004	 Word
  wDay . . . . . . . . . . . . .	 00000006	 Word
  wHour  . . . . . . . . . . . .	 00000008	 Word
  wMinute  . . . . . . . . . . .	 0000000A	 Word
  wSecond  . . . . . . . . . . .	 0000000C	 Word
  wMilliseconds  . . . . . . . .	 0000000E	 Word
WINDOW_BUFFER_SIZE_RECORD  . . .	 00000004
  dwSize . . . . . . . . . . . .	 00000000	 DWord


Segments and Groups:

                N a m e                 Size     Length   Align   Combine Class

FLAT . . . . . . . . . . . . . .	GROUP
STACK  . . . . . . . . . . . . .	32 Bit	 00001000 Para	  Stack	  'STACK'	 
_DATA  . . . . . . . . . . . . .	32 Bit	 00001930 Para	  Public  'DATA'	
_TEXT  . . . . . . . . . . . . .	32 Bit	 00000E0C Para	  Public  'CODE'	


Procedures, parameters, and locals:

                N a m e                 Type     Value    Attr

Bubble1  . . . . . . . . . . . .	P Near	 000006ED _TEXT	Length= 000000B5 Public STDCALL
  L2b  . . . . . . . . . . . . .	L Near	 000006F5 _TEXT	
  L3b  . . . . . . . . . . . . .	L Near	 000006F9 _TEXT	
  L4b  . . . . . . . . . . . . .	L Near	 00000705 _TEXT	
  L5b  . . . . . . . . . . . . .	L Near	 00000761 _TEXT	
  mainmenu . . . . . . . . . . .	L Near	 0000079F _TEXT	
CloseFile  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CloseHandle  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Clrscr . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CreateFileA  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CreateOutputFile . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Crlf . . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Delay  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
DumpMem  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
DumpRegs . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Elementsb  . . . . . . . . . . .	P Near	 000006BE _TEXT	Length= 0000002F Public STDCALL
  L1 . . . . . . . . . . . . . .	L Near	 000006E0 _TEXT	
Elementsh  . . . . . . . . . . .	P Near	 00000A16 _TEXT	Length= 0000002F Public STDCALL
  L1h  . . . . . . . . . . . . .	L Near	 00000A38 _TEXT	
Elementssh . . . . . . . . . . .	P Near	 00000828 _TEXT	Length= 0000002F Public STDCALL
  L1sh . . . . . . . . . . . . .	L Near	 0000084A _TEXT	
ExitProcess  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FileTimeToDosDateTime  . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FileTimeToSystemTime . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FlushConsoleInputBuffer  . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FormatMessageA . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetCommandLineA  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetCommandTail . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleCP . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleCursorInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleMode . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleScreenBufferInfo . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetDateTime  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetFileTime  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetKeyState  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetLastError . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetLocalTime . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetMaxXY . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetMseconds  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetNumberOfConsoleInputEvents  .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetProcessHeap . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetStdHandle . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetSystemTime  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetTextColor . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetTickCount . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Gotoxy . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapAlloc  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapCreate . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapDestroy  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapFree . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapSize . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Heapify  . . . . . . . . . . . .	P Near	 00000A5D _TEXT	Length= 000000AF Public STDCALL
  arrh . . . . . . . . . . . . .	DWord	 bp + 00000008
  nh . . . . . . . . . . . . . .	DWord	 bp + 0000000C
  i9 . . . . . . . . . . . . . .	DWord	 bp + 00000010
  largest  . . . . . . . . . . .	DWord	 bp - 00000004
  left . . . . . . . . . . . . .	DWord	 bp - 00000008
  right  . . . . . . . . . . . .	DWord	 bp - 0000000C
  L2h  . . . . . . . . . . . . .	L Near	 00000AB3 _TEXT	
  L3h  . . . . . . . . . . . . .	L Near	 00000AD9 _TEXT	
  L4h  . . . . . . . . . . . . .	L Near	 00000B08 _TEXT	
Heap . . . . . . . . . . . . . .	P Near	 00000B0C _TEXT	Length= 0000006A Public STDCALL
  arrh1  . . . . . . . . . . . .	DWord	 bp + 00000008
  nt . . . . . . . . . . . . . .	DWord	 bp + 0000000C
  i10  . . . . . . . . . . . . .	DWord	 bp - 00000004
  j10  . . . . . . . . . . . . .	DWord	 bp - 00000008
  L5h  . . . . . . . . . . . . .	L Near	 00000B26 _TEXT	
  L6h  . . . . . . . . . . . . .	L Near	 00000B49 _TEXT	
Input  . . . . . . . . . . . . .	P Near	 00000974 _TEXT	Length= 000000A2 Public STDCALL
Insertion_sort . . . . . . . . .	P Near	 000002C9 _TEXT	Length= 000001BF Public STDCALL
  li . . . . . . . . . . . . . .	L Near	 00000328 _TEXT	
  Forins . . . . . . . . . . . .	L Near	 00000370 _TEXT	
  inwhile  . . . . . . . . . . .	L Near	 000003A1 _TEXT	
  L1 . . . . . . . . . . . . . .	L Near	 000003FD _TEXT	
  print_array  . . . . . . . . .	L Near	 0000044E _TEXT	
  mainmenu . . . . . . . . . . .	L Near	 00000487 _TEXT	
IsDigit  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
LocalFree  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Mergeproc  . . . . . . . . . . .	P Near	 00000BDF _TEXT	Length= 000000CA Public STDCALL
  li . . . . . . . . . . . . . .	L Near	 00000C39 _TEXT	
  print_array  . . . . . . . . .	L Near	 00000C6F _TEXT	
  mainmenu . . . . . . . . . . .	L Near	 00000CA8 _TEXT	
MessageBoxA  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MsgBoxAsk  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MsgBox . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
OpenInputFile  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ParseDecimal32 . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ParseInteger32 . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
PeekConsoleInputA  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Printh . . . . . . . . . . . . .	P Near	 00000B76 _TEXT	Length= 0000004B Public STDCALL
  arr1 . . . . . . . . . . . . .	DWord	 bp + 00000008
  arr2 . . . . . . . . . . . . .	DWord	 bp + 0000000C
  L7h  . . . . . . . . . . . . .	L Near	 00000B7F _TEXT	
  mainmenu . . . . . . . . . . .	L Near	 00000BBD _TEXT	
Printsh  . . . . . . . . . . . .	P Near	 000008F9 _TEXT	Length= 0000007B Public STDCALL
  L2sh . . . . . . . . . . . . .	L Near	 00000935 _TEXT	
  mainmenu . . . . . . . . . . .	L Near	 00000973 _TEXT	
Random32 . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
RandomRange  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Randomize  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadChar . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadConsoleA . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadConsoleInputA  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadDec  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFile . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFloat  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFromFile . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadHex  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadInt  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadKeyFlush . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadKey  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadString . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleCursorInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleCursorPosition . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleMode . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleScreenBufferSize . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleTextAttribute  . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleTitleA . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleWindowInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetFilePointer . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetLocalTime . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetTextColor . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Shell  . . . . . . . . . . . . .	P Near	 00000857 _TEXT	Length= 000000A2 Public STDCALL
  DOsh . . . . . . . . . . . . .	L Near	 0000087F _TEXT	
  L3sh . . . . . . . . . . . . .	L Near	 000008A7 _TEXT	
  L5sh . . . . . . . . . . . . .	L Near	 000008EE _TEXT	
  L4sh . . . . . . . . . . . . .	L Near	 000008F6 _TEXT	
  L1sh . . . . . . . . . . . . .	L Near	 000008F8 _TEXT	
ShowFPUStack . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Sleep  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
StrLength  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_compare  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_copy . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_length . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_trim . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_ucase  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Swaph  . . . . . . . . . . . . .	P Near	 00000A45 _TEXT	Length= 00000018 Public STDCALL
  arr1 . . . . . . . . . . . . .	DWord	 bp + 00000008
  arr2 . . . . . . . . . . . . .	DWord	 bp + 0000000C
SystemTimeToFileTime . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WaitMsg  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteBinB  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteBin . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteChar  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleA  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleOutputAttribute  . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleOutputCharacterA . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteDec . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteFile  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteFloat . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteHexB  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteHex . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteInt . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteStackFrameName  . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteStackFrame  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteString  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteToFile  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteWindowsMsg  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
bubblesort . . . . . . . . . . .	P Near	 00000658 _TEXT	Length= 00000066 Public STDCALL
combsort . . . . . . . . . . . .	P Near	 000004B4 _TEXT	Length= 000001A4 Public STDCALL
  li . . . . . . . . . . . . . .	L Near	 00000509 _TEXT	
  WHILEE . . . . . . . . . . . .	L Near	 0000055B _TEXT	
  C2 . . . . . . . . . . . . . .	L Near	 00000567 _TEXT	
  P_A  . . . . . . . . . . . . .	L Near	 0000057B _TEXT	
  FORL . . . . . . . . . . . . .	L Near	 00000594 _TEXT	
  IFEND  . . . . . . . . . . . .	L Near	 000005F8 _TEXT	
  ENDFOR . . . . . . . . . . . .	L Near	 00000600 _TEXT	
  ENDWHILE . . . . . . . . . . .	L Near	 00000605 _TEXT	
  print_array  . . . . . . . . .	L Near	 0000061E _TEXT	
  mainmenu . . . . . . . . . . .	L Near	 00000657 _TEXT	
gaap . . . . . . . . . . . . . .	P Near	 00000488 _TEXT	Length= 0000002C Public STDCALL
  IFF  . . . . . . . . . . . . .	L Near	 000004A2 _TEXT	
  ELSEE  . . . . . . . . . . . .	L Near	 000004AE _TEXT	
  ENDD . . . . . . . . . . . . .	L Near	 000004B3 _TEXT	
heap_sort  . . . . . . . . . . .	P Near	 00000BC1 _TEXT	Length= 0000001E Public STDCALL
loadi  . . . . . . . . . . . . .	P Near	 00000D76 _TEXT	Length= 00000023 Public STDCALL
  l1 . . . . . . . . . . . . . .	L Near	 00000D85 _TEXT	
main . . . . . . . . . . . . . .	P Near	 00000014 _TEXT	Length= 00000031 Public STDCALL
  l1 . . . . . . . . . . . . . .	L Near	 0000002D _TEXT	
  l2 . . . . . . . . . . . . . .	L Near	 00000036 _TEXT	
  l3 . . . . . . . . . . . . . .	L Near	 0000003E _TEXT	
menu . . . . . . . . . . . . . .	P Near	 00000000 _TEXT	Length= 00000014 Public STDCALL
mergeSort  . . . . . . . . . . .	P Near	 00000D39 _TEXT	Length= 0000003D Public STDCALL
  ending . . . . . . . . . . . .	L Near	 00000D6F _TEXT	
merge  . . . . . . . . . . . . .	P Near	 00000CA9 _TEXT	Length= 00000090 Public STDCALL
  While1 . . . . . . . . . . . .	L Near	 00000CC2 _TEXT	
  While1_else  . . . . . . . . .	L Near	 00000CE6 _TEXT	
  afterWhile1  . . . . . . . . .	L Near	 00000CF6 _TEXT	
  While2 . . . . . . . . . . . .	L Near	 00000CF7 _TEXT	
  While3 . . . . . . . . . . . .	L Near	 00000D09 _TEXT	
  afterWhileLoops  . . . . . . .	L Near	 00000D1B _TEXT	
  forLoop1 . . . . . . . . . . .	L Near	 00000D1E _TEXT	
  endMergeProc . . . . . . . . .	L Near	 00000D2F _TEXT	
printf . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C
print  . . . . . . . . . . . . .	P Near	 00000D99 _TEXT	Length= 0000005B Public STDCALL
  print_array  . . . . . . . . .	L Near	 00000DBA _TEXT	
  mainmenu . . . . . . . . . . .	L Near	 00000DF3 _TEXT	
quicksort  . . . . . . . . . . .	P Near	 00000198 _TEXT	Length= 00000083 Public STDCALL
quicksor . . . . . . . . . . . .	P Near	 00000231 _TEXT	Length= 00000098 Public STDCALL
  sort_again . . . . . . . . . .	L Near	 00000259 _TEXT	
  loop_j_again . . . . . . . . .	L Near	 0000025D _TEXT	
  loop_i_again . . . . . . . . .	L Near	 0000026F _TEXT	
  compare  . . . . . . . . . . .	L Near	 00000281 _TEXT	
  over_loop  . . . . . . . . . .	L Near	 0000028C _TEXT	
  over . . . . . . . . . . . . .	L Near	 000002C8 _TEXT	
scanf  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C
scan . . . . . . . . . . . . . .	P Near	 00000DF4 _TEXT	Length= 00000018 Public STDCALL
  scanf_again  . . . . . . . . .	L Near	 00000DFC _TEXT	
selectionsort  . . . . . . . . .	P Near	 00000045 _TEXT	Length= 00000153 Public STDCALL
  li . . . . . . . . . . . . . .	L Near	 00000095 _TEXT	
  l1 . . . . . . . . . . . . . .	L Near	 000000C0 _TEXT	
  l2 . . . . . . . . . . . . . .	L Near	 000000DC _TEXT	
  l3 . . . . . . . . . . . . . .	L Near	 000000FF _TEXT	
  print_array  . . . . . . . . .	L Near	 0000015E _TEXT	
  mainmenu . . . . . . . . . . .	L Near	 00000197 _TEXT	
shell_sort . . . . . . . . . . .	P Near	 000007A2 _TEXT	Length= 00000086 Public STDCALL
swap . . . . . . . . . . . . . .	P Near	 0000021B _TEXT	Length= 00000016 Public STDCALL
wsprintfA  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C


Symbols:

                N a m e                 Type     Value    Attr

@CodeSize  . . . . . . . . . . .	Number	 00000000h   
@DataSize  . . . . . . . . . . .	Number	 00000000h   
@Interface . . . . . . . . . . .	Number	 00000003h   
@Model . . . . . . . . . . . . .	Number	 00000007h   
@code  . . . . . . . . . . . . .	Text   	 _TEXT
@data  . . . . . . . . . . . . .	Text   	 FLAT
@fardata?  . . . . . . . . . . .	Text   	 FLAT
@fardata . . . . . . . . . . . .	Text   	 FLAT
@stack . . . . . . . . . . . . .	Text   	 FLAT
ALT_MASK . . . . . . . . . . . .	Number	 00000003h   
CAPSLOCK_ON  . . . . . . . . . .	Number	 00000080h   
CREATE_ALWAYS  . . . . . . . . .	Number	 00000002h   
CREATE_NEW . . . . . . . . . . .	Number	 00000001h   
CTRL_MASK  . . . . . . . . . . .	Number	 0000000Ch   
CreateFile . . . . . . . . . . .	Text   	 CreateFileA
DO_NOT_SHARE . . . . . . . . . .	Number	 00000000h   
Display  . . . . . . . . . . . .	Byte	 00001848 _DATA	
ENABLE_ECHO_INPUT  . . . . . . .	Number	 00000004h   
ENABLE_LINE_INPUT  . . . . . . .	Number	 00000002h   
ENABLE_MOUSE_INPUT . . . . . . .	Number	 00000010h   
ENABLE_PROCESSED_INPUT . . . . .	Number	 00000001h   
ENABLE_PROCESSED_OUTPUT  . . . .	Number	 00000001h   
ENABLE_WINDOW_INPUT  . . . . . .	Number	 00000008h   
ENABLE_WRAP_AT_EOL_OUTPUT  . . .	Number	 00000002h   
ENHANCED_KEY . . . . . . . . . .	Number	 00000100h   
FALSE  . . . . . . . . . . . . .	Number	 00000000h   
FILE_APPEND_DATA . . . . . . . .	Number	 00000004h   
FILE_ATTRIBUTE_ARCHIVE . . . . .	Number	 00000020h   
FILE_ATTRIBUTE_COMPRESSED  . . .	Number	 00000800h   
FILE_ATTRIBUTE_DEVICE  . . . . .	Number	 00000040h   
FILE_ATTRIBUTE_DIRECTORY . . . .	Number	 00000010h   
FILE_ATTRIBUTE_ENCRYPTED . . . .	Number	 00004000h   
FILE_ATTRIBUTE_HIDDEN  . . . . .	Number	 00000002h   
FILE_ATTRIBUTE_NORMAL  . . . . .	Number	 00000080h   
FILE_ATTRIBUTE_NOT_CONTENT_INDEXED .	Number	 00002000h   
FILE_ATTRIBUTE_OFFLINE . . . . .	Number	 00001000h   
FILE_ATTRIBUTE_READONLY  . . . .	Number	 00000001h   
FILE_ATTRIBUTE_REPARSE_POINT . .	Number	 00000400h   
FILE_ATTRIBUTE_SPARSE_FILE . . .	Number	 00000200h   
FILE_ATTRIBUTE_SYSTEM  . . . . .	Number	 00000004h   
FILE_ATTRIBUTE_TEMPORARY . . . .	Number	 00000100h   
FILE_BEGIN . . . . . . . . . . .	Number	 00000000h   
FILE_CURRENT . . . . . . . . . .	Number	 00000001h   
FILE_DELETE_CHILD  . . . . . . .	Number	 00000040h   
FILE_END . . . . . . . . . . . .	Number	 00000002h   
FILE_READ_DATA . . . . . . . . .	Number	 00000001h   
FILE_SHARE_DELETE  . . . . . . .	Number	 00000004h   
FILE_SHARE_READ  . . . . . . . .	Number	 00000001h   
FILE_SHARE_WRITE . . . . . . . .	Number	 00000002h   
FILE_WRITE_DATA  . . . . . . . .	Number	 00000002h   
FOCUS_EVENT  . . . . . . . . . .	Number	 00000010h   
FORMAT_MESSAGE_ALLOCATE_BUFFER .	Number	 00000100h   
FORMAT_MESSAGE_FROM_SYSTEM . . .	Number	 00001000h   
FormatMessage  . . . . . . . . .	Text   	 FormatMessageA
GENERIC_ALL  . . . . . . . . . .	Number	 10000000h   
GENERIC_EXECUTE  . . . . . . . .	Number	 20000000h   
GENERIC_READ . . . . . . . . . .	Number	 -80000000h   
GENERIC_WRITE  . . . . . . . . .	Number	 40000000h   
GetCommandLine . . . . . . . . .	Text   	 GetCommandLineA
HANDLE . . . . . . . . . . . . .	Text   	 DWORD
HEAP_GENERATE_EXCEPTIONS . . . .	Number	 00000004h   
HEAP_GROWABLE  . . . . . . . . .	Number	 00000002h   
HEAP_NO_SERIALIZE  . . . . . . .	Number	 00000001h   
HEAP_REALLOC_IN_PLACE_ONLY . . .	Number	 00000010h   
HEAP_ZERO_MEMORY . . . . . . . .	Number	 00000008h   
IDABORT  . . . . . . . . . . . .	Number	 00000003h   
IDCANCEL . . . . . . . . . . . .	Number	 00000002h   
IDCLOSE  . . . . . . . . . . . .	Number	 00000008h   
IDCONTINUE . . . . . . . . . . .	Number	 0000000Bh   
IDHELP . . . . . . . . . . . . .	Number	 00000009h   
IDIGNORE . . . . . . . . . . . .	Number	 00000005h   
IDNO . . . . . . . . . . . . . .	Number	 00000007h   
IDOK . . . . . . . . . . . . . .	Number	 00000001h   
IDRETRY  . . . . . . . . . . . .	Number	 00000004h   
IDTIMEOUT  . . . . . . . . . . .	Number	 00007D00h   
IDTRYAGAIN . . . . . . . . . . .	Number	 0000000Ah   
IDYES  . . . . . . . . . . . . .	Number	 00000006h   
INVALID_HANDLE_VALUE . . . . . .	Number	 -00000001h   
KBDOWN_FLAG  . . . . . . . . . .	Number	 00000001h   
KEY_EVENT  . . . . . . . . . . .	Number	 00000001h   
KEY_MASKS  . . . . . . . . . . .	Number	 0000001Fh   
LEFT_ALT_PRESSED . . . . . . . .	Number	 00000002h   
LEFT_CTRL_PRESSED  . . . . . . .	Number	 00000008h   
MB_ABORTRETRYIGNORE  . . . . . .	Number	 00000002h   
MB_APPLMODAL . . . . . . . . . .	Number	 00000000h   
MB_CANCELTRYCONTINUE . . . . . .	Number	 00000006h   
MB_DEFBUTTON1  . . . . . . . . .	Number	 00000000h   
MB_DEFBUTTON2  . . . . . . . . .	Number	 00000100h   
MB_DEFBUTTON3  . . . . . . . . .	Number	 00000200h   
MB_DEFBUTTON4  . . . . . . . . .	Number	 00000300h   
MB_HELP  . . . . . . . . . . . .	Number	 00004000h   
MB_ICONASTERISK  . . . . . . . .	Number	 00000040h   
MB_ICONERROR . . . . . . . . . .	Number	 00000010h   
MB_ICONEXCLAMATION . . . . . . .	Number	 00000030h   
MB_ICONHAND  . . . . . . . . . .	Number	 00000010h   
MB_ICONINFORMATION . . . . . . .	Number	 00000040h   
MB_ICONQUESTION  . . . . . . . .	Number	 00000020h   
MB_ICONSTOP  . . . . . . . . . .	Number	 00000010h   
MB_ICONWARNING . . . . . . . . .	Number	 00000030h   
MB_OKCANCEL  . . . . . . . . . .	Number	 00000001h   
MB_OK  . . . . . . . . . . . . .	Number	 00000000h   
MB_RETRYCANCEL . . . . . . . . .	Number	 00000005h   
MB_SYSTEMMODAL . . . . . . . . .	Number	 00001000h   
MB_TASKMODAL . . . . . . . . . .	Number	 00002000h   
MB_USERICON  . . . . . . . . . .	Number	 00000080h   
MB_YESNOCANCEL . . . . . . . . .	Number	 00000003h   
MB_YESNO . . . . . . . . . . . .	Number	 00000004h   
MENU_EVENT . . . . . . . . . . .	Number	 00000008h   
MOUSE_EVENT  . . . . . . . . . .	Number	 00000002h   
MessageBox . . . . . . . . . . .	Text   	 MessageBoxA
NULL . . . . . . . . . . . . . .	Number	 00000000h   
NUMLOCK_ON . . . . . . . . . . .	Number	 00000020h   
OPEN_ALWAYS  . . . . . . . . . .	Number	 00000004h   
OPEN_EXISTING  . . . . . . . . .	Number	 00000003h   
PeekConsoleInput . . . . . . . .	Text   	 PeekConsoleInputA
RIGHT_ALT_PRESSED  . . . . . . .	Number	 00000001h   
RIGHT_CTRL_PRESSED . . . . . . .	Number	 00000004h   
ReadConsoleInput . . . . . . . .	Text   	 ReadConsoleInputA
ReadConsole  . . . . . . . . . .	Text   	 ReadConsoleA
SCROLLLOCK_ON  . . . . . . . . .	Number	 00000040h   
SHIFT_MASK . . . . . . . . . . .	Number	 00000010h   
SHIFT_PRESSED  . . . . . . . . .	Number	 00000010h   
STD_ERROR_HANDLE . . . . . . . .	Number	 -0000000Ch   
STD_INPUT_HANDLE . . . . . . . .	Number	 -0000000Ah   
STD_OUTPUT_HANDLE  . . . . . . .	Number	 -0000000Bh   
SetConsoleTitle  . . . . . . . .	Text   	 SetConsoleTitleA
TAB  . . . . . . . . . . . . . .	Number	 00000009h   
TRUE . . . . . . . . . . . . . .	Number	 00000001h   
TRUNCATE_EXISTING  . . . . . . .	Number	 00000005h   
VK_11  . . . . . . . . . . . . .	Number	 000000BDh   
VK_12  . . . . . . . . . . . . .	Number	 000000BBh   
VK_ADD . . . . . . . . . . . . .	Number	 0000006Bh   
VK_BACK  . . . . . . . . . . . .	Number	 00000008h   
VK_CANCEL  . . . . . . . . . . .	Number	 00000003h   
VK_CAPITAL . . . . . . . . . . .	Number	 00000014h   
VK_CLEAR . . . . . . . . . . . .	Number	 0000000Ch   
VK_CONTROL . . . . . . . . . . .	Number	 00000011h   
VK_DECIMAL . . . . . . . . . . .	Number	 0000006Eh   
VK_DELETE  . . . . . . . . . . .	Number	 0000002Eh   
VK_DIVIDE  . . . . . . . . . . .	Number	 0000006Fh   
VK_DOWN  . . . . . . . . . . . .	Number	 00000028h   
VK_END . . . . . . . . . . . . .	Number	 00000023h   
VK_ESCAPE  . . . . . . . . . . .	Number	 0000001Bh   
VK_EXECUTE . . . . . . . . . . .	Number	 0000002Bh   
VK_F10 . . . . . . . . . . . . .	Number	 00000079h   
VK_F11 . . . . . . . . . . . . .	Number	 0000007Ah   
VK_F12 . . . . . . . . . . . . .	Number	 0000007Bh   
VK_F13 . . . . . . . . . . . . .	Number	 0000007Ch   
VK_F14 . . . . . . . . . . . . .	Number	 0000007Dh   
VK_F15 . . . . . . . . . . . . .	Number	 0000007Eh   
VK_F16 . . . . . . . . . . . . .	Number	 0000007Fh   
VK_F17 . . . . . . . . . . . . .	Number	 00000080h   
VK_F18 . . . . . . . . . . . . .	Number	 00000081h   
VK_F19 . . . . . . . . . . . . .	Number	 00000082h   
VK_F1  . . . . . . . . . . . . .	Number	 00000070h   
VK_F20 . . . . . . . . . . . . .	Number	 00000083h   
VK_F21 . . . . . . . . . . . . .	Number	 00000084h   
VK_F22 . . . . . . . . . . . . .	Number	 00000085h   
VK_F23 . . . . . . . . . . . . .	Number	 00000086h   
VK_F24 . . . . . . . . . . . . .	Number	 00000087h   
VK_F2  . . . . . . . . . . . . .	Number	 00000071h   
VK_F3  . . . . . . . . . . . . .	Number	 00000072h   
VK_F4  . . . . . . . . . . . . .	Number	 00000073h   
VK_F5  . . . . . . . . . . . . .	Number	 00000074h   
VK_F6  . . . . . . . . . . . . .	Number	 00000075h   
VK_F7  . . . . . . . . . . . . .	Number	 00000076h   
VK_F8  . . . . . . . . . . . . .	Number	 00000077h   
VK_F9  . . . . . . . . . . . . .	Number	 00000078h   
VK_HELP  . . . . . . . . . . . .	Number	 0000002Fh   
VK_HOME  . . . . . . . . . . . .	Number	 00000024h   
VK_INSERT  . . . . . . . . . . .	Number	 0000002Dh   
VK_LBUTTON . . . . . . . . . . .	Number	 00000001h   
VK_LCONTROL  . . . . . . . . . .	Number	 000000A2h   
VK_LEFT  . . . . . . . . . . . .	Number	 00000025h   
VK_LMENU . . . . . . . . . . . .	Number	 000000A4h   
VK_LSHIFT  . . . . . . . . . . .	Number	 000000A0h   
VK_MENU  . . . . . . . . . . . .	Number	 00000012h   
VK_MULTIPLY  . . . . . . . . . .	Number	 0000006Ah   
VK_NEXT  . . . . . . . . . . . .	Number	 00000022h   
VK_NUMLOCK . . . . . . . . . . .	Number	 00000090h   
VK_NUMPAD0 . . . . . . . . . . .	Number	 00000060h   
VK_NUMPAD1 . . . . . . . . . . .	Number	 00000061h   
VK_NUMPAD2 . . . . . . . . . . .	Number	 00000062h   
VK_NUMPAD3 . . . . . . . . . . .	Number	 00000063h   
VK_NUMPAD4 . . . . . . . . . . .	Number	 00000064h   
VK_NUMPAD5 . . . . . . . . . . .	Number	 00000065h   
VK_NUMPAD6 . . . . . . . . . . .	Number	 00000066h   
VK_NUMPAD7 . . . . . . . . . . .	Number	 00000067h   
VK_NUMPAD8 . . . . . . . . . . .	Number	 00000068h   
VK_NUMPAD9 . . . . . . . . . . .	Number	 00000069h   
VK_PAUSE . . . . . . . . . . . .	Number	 00000013h   
VK_PRINT . . . . . . . . . . . .	Number	 0000002Ah   
VK_PRIOR . . . . . . . . . . . .	Number	 00000021h   
VK_RBUTTON . . . . . . . . . . .	Number	 00000002h   
VK_RCONTROL  . . . . . . . . . .	Number	 000000A3h   
VK_RETURN  . . . . . . . . . . .	Number	 0000000Dh   
VK_RIGHT . . . . . . . . . . . .	Number	 00000027h   
VK_RMENU . . . . . . . . . . . .	Number	 000000A5h   
VK_RSHIFT  . . . . . . . . . . .	Number	 000000A1h   
VK_SCROLL  . . . . . . . . . . .	Number	 00000091h   
VK_SEPARATER . . . . . . . . . .	Number	 0000006Ch   
VK_SHIFT . . . . . . . . . . . .	Number	 00000010h   
VK_SNAPSHOT  . . . . . . . . . .	Number	 0000002Ch   
VK_SPACE . . . . . . . . . . . .	Number	 00000020h   
VK_SUBTRACT  . . . . . . . . . .	Number	 0000006Dh   
VK_TAB . . . . . . . . . . . . .	Number	 00000009h   
VK_UP  . . . . . . . . . . . . .	Number	 00000026h   
WINDOW_BUFFER_SIZE_EVENT . . . .	Number	 00000004h   
WriteConsoleOutputCharacter  . .	Text   	 WriteConsoleOutputCharacterA
WriteConsole . . . . . . . . . .	Text   	 WriteConsoleA
arrayb . . . . . . . . . . . . .	DWord	 00000A5A _DATA	
arrayh . . . . . . . . . . . . .	DWord	 00001378 _DATA	
arraysh  . . . . . . . . . . . .	DWord	 00000ED6 _DATA	
array  . . . . . . . . . . . . .	Text   	 esi
arr  . . . . . . . . . . . . . .	DWord	 00000A06 _DATA	
black  . . . . . . . . . . . . .	Number	 00000000h   
blue . . . . . . . . . . . . . .	Number	 00000001h   
brown  . . . . . . . . . . . . .	Number	 00000006h   
buffSize1  . . . . . . . . . . .	Number	 000003E8h   
buffSize . . . . . . . . . . . .	Number	 000003E8h   
bufferb  . . . . . . . . . . . .	Byte	 00000AEE _DATA	
bufferh  . . . . . . . . . . . .	Byte	 00001430 _DATA	
bufferqu . . . . . . . . . . . .	Byte	 0000053D _DATA	
buffersh . . . . . . . . . . . .	Byte	 00000F90 _DATA	
buffer . . . . . . . . . . . . .	Byte	 0000014B _DATA	
casetable  . . . . . . . . . . .	Byte	 00001818 _DATA	
cnt  . . . . . . . . . . . . . .	DWord	 000000E5 _DATA	
combstring . . . . . . . . . . .	Byte	 000009A6 _DATA	
con  . . . . . . . . . . . . . .	Byte	 00000001 _DATA	
count1 . . . . . . . . . . . . .	Number	 0000000Ah   
count2 . . . . . . . . . . . . .	Number	 0000000Ah   
count  . . . . . . . . . . . . .	Number	 0000000Ah   
cyan . . . . . . . . . . . . . .	Number	 00000003h   
dat  . . . . . . . . . . . . . .	DWord	 000000BD _DATA	
d  . . . . . . . . . . . . . . .	DWord	 000000F1 _DATA	
entry  . . . . . . . . . . . . .	Number	 00000005h   
exit . . . . . . . . . . . . . .	Text   	 INVOKE ExitProcess,0
file1  . . . . . . . . . . . . .	Byte	 000009E6 _DATA	
file3  . . . . . . . . . . . . .	Byte	 000009F4 _DATA	
fileb  . . . . . . . . . . . . .	Byte	 00000AE3 _DATA	
filehandleb  . . . . . . . . . .	DWord	 00000ADF _DATA	
filehandleh  . . . . . . . . . .	DWord	 00001423 _DATA	
filehandlesh . . . . . . . . . .	DWord	 00000F82 _DATA	
filehandle . . . . . . . . . . .	DWord	 00000139 _DATA	
fileh  . . . . . . . . . . . . .	Byte	 00001427 _DATA	
filequ . . . . . . . . . . . . .	Byte	 00000533 _DATA	
filese . . . . . . . . . . . . .	Byte	 0000013D _DATA	
filesh . . . . . . . . . . . . .	Byte	 00000F86 _DATA	
file . . . . . . . . . . . . . .	Byte	 000009DD _DATA	
gap  . . . . . . . . . . . . . .	DWord	 00000976 _DATA	
go . . . . . . . . . . . . . . .	Byte	 0000093F _DATA	
gray . . . . . . . . . . . . . .	Number	 00000008h   
green  . . . . . . . . . . . . .	Number	 00000002h   
im . . . . . . . . . . . . . . .	Text   	 eax
insertionsort  . . . . . . . . .	Byte	 000009BF _DATA	
i  . . . . . . . . . . . . . . .	DWord	 00000081 _DATA	
jm . . . . . . . . . . . . . . .	Text   	 ebx
j  . . . . . . . . . . . . . . .	DWord	 00000085 _DATA	
key  . . . . . . . . . . . . . .	DWord	 00000A02 _DATA	
km . . . . . . . . . . . . . . .	Text   	 edi
lens . . . . . . . . . . . . . .	DWord	 00000A2E _DATA	
lightBlue  . . . . . . . . . . .	Number	 00000009h   
lightCyan  . . . . . . . . . . .	Number	 0000000Bh   
lightGray  . . . . . . . . . . .	Number	 00000007h   
lightGreen . . . . . . . . . . .	Number	 0000000Ah   
lightMagenta . . . . . . . . . .	Number	 0000000Dh   
lightRed . . . . . . . . . . . .	Number	 0000000Ch   
lm . . . . . . . . . . . . . . .	Text   	 ebp
loading  . . . . . . . . . . . .	Byte	 00001840 _DATA	
l  . . . . . . . . . . . . . . .	DWord	 000000E9 _DATA	
magenta  . . . . . . . . . . . .	Number	 00000005h   
mm . . . . . . . . . . . . . . .	Text   	 edx
ms . . . . . . . . . . . . . . .	Byte	 0000000A _DATA	
numberofentries  . . . . . . . .	Number	 00000008h   
n  . . . . . . . . . . . . . . .	DWord	 000009FE _DATA	
p  . . . . . . . . . . . . . . .	DWord	 00000089 _DATA	
quickstring  . . . . . . . . . .	Byte	 00000925 _DATA	
red  . . . . . . . . . . . . . .	Number	 00000004h   
resultsh . . . . . . . . . . . .	DWord	 00000EFE _DATA	
result . . . . . . . . . . . . .	DWord	 000013A0 _DATA	
rm . . . . . . . . . . . . . . .	Text   	 ecx
r  . . . . . . . . . . . . . . .	DWord	 000000ED _DATA	
sb . . . . . . . . . . . . . . .	Byte	 0000002C _DATA	
size2  . . . . . . . . . . . . .	DWord	 00000091 _DATA	
size_1 . . . . . . . . . . . . .	DWord	 0000008D _DATA	
ssort1 . . . . . . . . . . . . .	DWord	 0000097E _DATA	
ssort2 . . . . . . . . . . . . .	DWord	 00000095 _DATA	
ssort5 . . . . . . . . . . . . .	DWord	 00000A32 _DATA	
ssort  . . . . . . . . . . . . .	DWord	 00000059 _DATA	
str10  . . . . . . . . . . . . .	Byte	 00000F34 _DATA	
str11  . . . . . . . . . . . . .	Byte	 00000F53 _DATA	
str12  . . . . . . . . . . . . .	Byte	 00000F6F _DATA	
str1 . . . . . . . . . . . . . .	Byte	 00000A82 _DATA	
str2 . . . . . . . . . . . . . .	Byte	 00000A91 _DATA	
str3 . . . . . . . . . . . . . .	Byte	 00000AB0 _DATA	
str4 . . . . . . . . . . . . . .	Byte	 00000ACC _DATA	
str5 . . . . . . . . . . . . . .	Byte	 000013C8 _DATA	
str6 . . . . . . . . . . . . . .	Byte	 000013D5 _DATA	
str7 . . . . . . . . . . . . . .	Byte	 000013F4 _DATA	
str8 . . . . . . . . . . . . . .	Byte	 00001410 _DATA	
str9 . . . . . . . . . . . . . .	Byte	 00000F26 _DATA	
string1  . . . . . . . . . . . .	Byte	 00000114 _DATA	
string . . . . . . . . . . . . .	Byte	 000000F5 _DATA	
swp  . . . . . . . . . . . . . .	DWord	 0000097A _DATA	
temp . . . . . . . . . . . . . .	Byte	 00000000 _DATA	
white  . . . . . . . . . . . . .	Number	 0000000Fh   
wsprintf . . . . . . . . . . . .	Text   	 wsprintfA
yellow . . . . . . . . . . . . .	Number	 0000000Eh   

	   0 Warnings
	   0 Errors
